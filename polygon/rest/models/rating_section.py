# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RatingSection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current': 'float',
        'month1': 'float',
        'month2': 'float',
        'month3': 'float',
        'month4': 'float',
        'month5': 'float'
    }

    attribute_map = {
        'current': 'current',
        'month1': 'month1',
        'month2': 'month2',
        'month3': 'month3',
        'month4': 'month4',
        'month5': 'month5'
    }

    def __init__(self, current=None, month1=None, month2=None, month3=None, month4=None, month5=None):  # noqa: E501
        """RatingSection - a model defined in Swagger"""  # noqa: E501
        self._current = None
        self._month1 = None
        self._month2 = None
        self._month3 = None
        self._month4 = None
        self._month5 = None
        self.discriminator = None
        self.current = current
        self.month1 = month1
        self.month2 = month2
        self.month3 = month3
        if month4 is not None:
            self.month4 = month4
        if month5 is not None:
            self.month5 = month5

    @property
    def current(self):
        """Gets the current of this RatingSection.  # noqa: E501

        Analyst Rating at current month  # noqa: E501

        :return: The current of this RatingSection.  # noqa: E501
        :rtype: float
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this RatingSection.

        Analyst Rating at current month  # noqa: E501

        :param current: The current of this RatingSection.  # noqa: E501
        :type: float
        """
        if current is None:
            raise ValueError("Invalid value for `current`, must not be `None`")  # noqa: E501

        self._current = current

    @property
    def month1(self):
        """Gets the month1 of this RatingSection.  # noqa: E501

        Analyst Ratings at 1 month in the future  # noqa: E501

        :return: The month1 of this RatingSection.  # noqa: E501
        :rtype: float
        """
        return self._month1

    @month1.setter
    def month1(self, month1):
        """Sets the month1 of this RatingSection.

        Analyst Ratings at 1 month in the future  # noqa: E501

        :param month1: The month1 of this RatingSection.  # noqa: E501
        :type: float
        """
        if month1 is None:
            raise ValueError("Invalid value for `month1`, must not be `None`")  # noqa: E501

        self._month1 = month1

    @property
    def month2(self):
        """Gets the month2 of this RatingSection.  # noqa: E501

        Analyst Ratings at 2 month in the future  # noqa: E501

        :return: The month2 of this RatingSection.  # noqa: E501
        :rtype: float
        """
        return self._month2

    @month2.setter
    def month2(self, month2):
        """Sets the month2 of this RatingSection.

        Analyst Ratings at 2 month in the future  # noqa: E501

        :param month2: The month2 of this RatingSection.  # noqa: E501
        :type: float
        """
        if month2 is None:
            raise ValueError("Invalid value for `month2`, must not be `None`")  # noqa: E501

        self._month2 = month2

    @property
    def month3(self):
        """Gets the month3 of this RatingSection.  # noqa: E501

        Analyst Ratings at 3 month in the future  # noqa: E501

        :return: The month3 of this RatingSection.  # noqa: E501
        :rtype: float
        """
        return self._month3

    @month3.setter
    def month3(self, month3):
        """Sets the month3 of this RatingSection.

        Analyst Ratings at 3 month in the future  # noqa: E501

        :param month3: The month3 of this RatingSection.  # noqa: E501
        :type: float
        """
        if month3 is None:
            raise ValueError("Invalid value for `month3`, must not be `None`")  # noqa: E501

        self._month3 = month3

    @property
    def month4(self):
        """Gets the month4 of this RatingSection.  # noqa: E501

        Analyst Ratings at 4 month in the future  # noqa: E501

        :return: The month4 of this RatingSection.  # noqa: E501
        :rtype: float
        """
        return self._month4

    @month4.setter
    def month4(self, month4):
        """Sets the month4 of this RatingSection.

        Analyst Ratings at 4 month in the future  # noqa: E501

        :param month4: The month4 of this RatingSection.  # noqa: E501
        :type: float
        """

        self._month4 = month4

    @property
    def month5(self):
        """Gets the month5 of this RatingSection.  # noqa: E501

        Analyst Ratings at 5 month in the future  # noqa: E501

        :return: The month5 of this RatingSection.  # noqa: E501
        :rtype: float
        """
        return self._month5

    @month5.setter
    def month5(self, month5):
        """Sets the month5 of this RatingSection.

        Analyst Ratings at 5 month in the future  # noqa: E501

        :param month5: The month5 of this RatingSection.  # noqa: E501
        :type: float
        """

        self._month5 = month5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RatingSection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RatingSection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
