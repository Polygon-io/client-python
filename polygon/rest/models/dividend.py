# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Dividend(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'StockSymbol',
        'type': 'str',
        'ex_date': 'datetime',
        'payment_date': 'datetime',
        'record_date': 'datetime',
        'declared_date': 'datetime',
        'amount': 'float',
        'qualified': 'str',
        'flag': 'str'
    }

    attribute_map = {
        'symbol': 'symbol',
        'type': 'type',
        'ex_date': 'exDate',
        'payment_date': 'paymentDate',
        'record_date': 'recordDate',
        'declared_date': 'declaredDate',
        'amount': 'amount',
        'qualified': 'qualified',
        'flag': 'flag'
    }

    def __init__(self, symbol=None, type=None, ex_date=None, payment_date=None, record_date=None, declared_date=None, amount=None, qualified=None, flag=None):  # noqa: E501
        """Dividend - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._type = None
        self._ex_date = None
        self._payment_date = None
        self._record_date = None
        self._declared_date = None
        self._amount = None
        self._qualified = None
        self._flag = None
        self.discriminator = None
        self.symbol = symbol
        self.type = type
        self.ex_date = ex_date
        if payment_date is not None:
            self.payment_date = payment_date
        if record_date is not None:
            self.record_date = record_date
        if declared_date is not None:
            self.declared_date = declared_date
        self.amount = amount
        if qualified is not None:
            self.qualified = qualified
        if flag is not None:
            self.flag = flag

    @property
    def symbol(self):
        """Gets the symbol of this Dividend.  # noqa: E501


        :return: The symbol of this Dividend.  # noqa: E501
        :rtype: StockSymbol
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Dividend.


        :param symbol: The symbol of this Dividend.  # noqa: E501
        :type: StockSymbol
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def type(self):
        """Gets the type of this Dividend.  # noqa: E501

        Refers to the dividend payment type<br/> - Dividend income<br/> - Interest income<br/> - Stock dividend<br/> - Short term capital gain<br/> - Medium term capital gain<br/> - Long term capital gain<br/> - Unspecified term capital gain<br/>   # noqa: E501

        :return: The type of this Dividend.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Dividend.

        Refers to the dividend payment type<br/> - Dividend income<br/> - Interest income<br/> - Stock dividend<br/> - Short term capital gain<br/> - Medium term capital gain<br/> - Long term capital gain<br/> - Unspecified term capital gain<br/>   # noqa: E501

        :param type: The type of this Dividend.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def ex_date(self):
        """Gets the ex_date of this Dividend.  # noqa: E501

        Execution date of the trade  # noqa: E501

        :return: The ex_date of this Dividend.  # noqa: E501
        :rtype: datetime
        """
        return self._ex_date

    @ex_date.setter
    def ex_date(self, ex_date):
        """Sets the ex_date of this Dividend.

        Execution date of the trade  # noqa: E501

        :param ex_date: The ex_date of this Dividend.  # noqa: E501
        :type: datetime
        """
        if ex_date is None:
            raise ValueError("Invalid value for `ex_date`, must not be `None`")  # noqa: E501

        self._ex_date = ex_date

    @property
    def payment_date(self):
        """Gets the payment_date of this Dividend.  # noqa: E501

        Payment date of the trade  # noqa: E501

        :return: The payment_date of this Dividend.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this Dividend.

        Payment date of the trade  # noqa: E501

        :param payment_date: The payment_date of this Dividend.  # noqa: E501
        :type: datetime
        """

        self._payment_date = payment_date

    @property
    def record_date(self):
        """Gets the record_date of this Dividend.  # noqa: E501

        Record date of the trade  # noqa: E501

        :return: The record_date of this Dividend.  # noqa: E501
        :rtype: datetime
        """
        return self._record_date

    @record_date.setter
    def record_date(self, record_date):
        """Sets the record_date of this Dividend.

        Record date of the trade  # noqa: E501

        :param record_date: The record_date of this Dividend.  # noqa: E501
        :type: datetime
        """

        self._record_date = record_date

    @property
    def declared_date(self):
        """Gets the declared_date of this Dividend.  # noqa: E501

        Declared date of the trade  # noqa: E501

        :return: The declared_date of this Dividend.  # noqa: E501
        :rtype: datetime
        """
        return self._declared_date

    @declared_date.setter
    def declared_date(self, declared_date):
        """Sets the declared_date of this Dividend.

        Declared date of the trade  # noqa: E501

        :param declared_date: The declared_date of this Dividend.  # noqa: E501
        :type: datetime
        """

        self._declared_date = declared_date

    @property
    def amount(self):
        """Gets the amount of this Dividend.  # noqa: E501

        Amount of the dividend  # noqa: E501

        :return: The amount of this Dividend.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Dividend.

        Amount of the dividend  # noqa: E501

        :param amount: The amount of this Dividend.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def qualified(self):
        """Gets the qualified of this Dividend.  # noqa: E501

        Refers to the dividend income type<br/> - P = Partially qualified income<br/> - Q = Qualified income<br/> - N = Unqualified income<br/> - null = N/A or unknown   # noqa: E501

        :return: The qualified of this Dividend.  # noqa: E501
        :rtype: str
        """
        return self._qualified

    @qualified.setter
    def qualified(self, qualified):
        """Sets the qualified of this Dividend.

        Refers to the dividend income type<br/> - P = Partially qualified income<br/> - Q = Qualified income<br/> - N = Unqualified income<br/> - null = N/A or unknown   # noqa: E501

        :param qualified: The qualified of this Dividend.  # noqa: E501
        :type: str
        """
        allowed_values = ["P", "Q", "N", "null"]  # noqa: E501
        if qualified not in allowed_values:
            raise ValueError(
                "Invalid value for `qualified` ({0}), must be one of {1}"  # noqa: E501
                .format(qualified, allowed_values)
            )

        self._qualified = qualified

    @property
    def flag(self):
        """Gets the flag of this Dividend.  # noqa: E501

        Refers to the dividend flag, if set<br/> FI = Final dividend, div ends or instrument ends<br/> LI = Liquidation, instrument liquidates<br/> PR = Proceeds of a sale of rights or shares<br/> RE = Redemption of rights<br/> AC = Accrued dividend<br/> AR = Payment in arrears<br/> AD = Additional payment<br/> EX = Extra payment<br/> SP = Special dividend<br/> YE = Year end<br/> UR = Unknown rate<br/> SU = Regular dividend is suspended   # noqa: E501

        :return: The flag of this Dividend.  # noqa: E501
        :rtype: str
        """
        return self._flag

    @flag.setter
    def flag(self, flag):
        """Sets the flag of this Dividend.

        Refers to the dividend flag, if set<br/> FI = Final dividend, div ends or instrument ends<br/> LI = Liquidation, instrument liquidates<br/> PR = Proceeds of a sale of rights or shares<br/> RE = Redemption of rights<br/> AC = Accrued dividend<br/> AR = Payment in arrears<br/> AD = Additional payment<br/> EX = Extra payment<br/> SP = Special dividend<br/> YE = Year end<br/> UR = Unknown rate<br/> SU = Regular dividend is suspended   # noqa: E501

        :param flag: The flag of this Dividend.  # noqa: E501
        :type: str
        """

        self._flag = flag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Dividend, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Dividend):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
