# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Earning(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'eps_report_date': 'datetime',
        'eps_report_date_str': 'str',
        'fiscal_period': 'str',
        'fiscal_end_date': 'datetime',
        'actual_eps': 'float',
        'consensus_eps': 'float',
        'estimated_eps': 'float',
        'announce_time': 'str',
        'number_of_estimates': 'float',
        'eps_surprise_dollar': 'float',
        'year_ago': 'float',
        'year_ago_change_percent': 'float',
        'estimated_change_percent': 'float'
    }

    attribute_map = {
        'symbol': 'symbol',
        'eps_report_date': 'EPSReportDate',
        'eps_report_date_str': 'EPSReportDateStr',
        'fiscal_period': 'fiscalPeriod',
        'fiscal_end_date': 'fiscalEndDate',
        'actual_eps': 'actualEPS',
        'consensus_eps': 'consensusEPS',
        'estimated_eps': 'estimatedEPS',
        'announce_time': 'announceTime',
        'number_of_estimates': 'numberOfEstimates',
        'eps_surprise_dollar': 'EPSSurpriseDollar',
        'year_ago': 'yearAgo',
        'year_ago_change_percent': 'yearAgoChangePercent',
        'estimated_change_percent': 'estimatedChangePercent'
    }

    def __init__(self, symbol=None, eps_report_date=None, eps_report_date_str=None, fiscal_period=None, fiscal_end_date=None, actual_eps=None, consensus_eps=None, estimated_eps=None, announce_time=None, number_of_estimates=None, eps_surprise_dollar=None, year_ago=None, year_ago_change_percent=None, estimated_change_percent=None):  # noqa: E501
        """Earning - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._eps_report_date = None
        self._eps_report_date_str = None
        self._fiscal_period = None
        self._fiscal_end_date = None
        self._actual_eps = None
        self._consensus_eps = None
        self._estimated_eps = None
        self._announce_time = None
        self._number_of_estimates = None
        self._eps_surprise_dollar = None
        self._year_ago = None
        self._year_ago_change_percent = None
        self._estimated_change_percent = None
        self.discriminator = None
        self.symbol = symbol
        self.eps_report_date = eps_report_date
        self.eps_report_date_str = eps_report_date_str
        if fiscal_period is not None:
            self.fiscal_period = fiscal_period
        if fiscal_end_date is not None:
            self.fiscal_end_date = fiscal_end_date
        if actual_eps is not None:
            self.actual_eps = actual_eps
        if consensus_eps is not None:
            self.consensus_eps = consensus_eps
        if estimated_eps is not None:
            self.estimated_eps = estimated_eps
        if announce_time is not None:
            self.announce_time = announce_time
        if number_of_estimates is not None:
            self.number_of_estimates = number_of_estimates
        if eps_surprise_dollar is not None:
            self.eps_surprise_dollar = eps_surprise_dollar
        if year_ago is not None:
            self.year_ago = year_ago
        if year_ago_change_percent is not None:
            self.year_ago_change_percent = year_ago_change_percent
        if estimated_change_percent is not None:
            self.estimated_change_percent = estimated_change_percent

    @property
    def symbol(self):
        """Gets the symbol of this Earning.  # noqa: E501

        Stock Symbol  # noqa: E501

        :return: The symbol of this Earning.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Earning.

        Stock Symbol  # noqa: E501

        :param symbol: The symbol of this Earning.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def eps_report_date(self):
        """Gets the eps_report_date of this Earning.  # noqa: E501

        Report Date  # noqa: E501

        :return: The eps_report_date of this Earning.  # noqa: E501
        :rtype: datetime
        """
        return self._eps_report_date

    @eps_report_date.setter
    def eps_report_date(self, eps_report_date):
        """Sets the eps_report_date of this Earning.

        Report Date  # noqa: E501

        :param eps_report_date: The eps_report_date of this Earning.  # noqa: E501
        :type: datetime
        """
        if eps_report_date is None:
            raise ValueError("Invalid value for `eps_report_date`, must not be `None`")  # noqa: E501

        self._eps_report_date = eps_report_date

    @property
    def eps_report_date_str(self):
        """Gets the eps_report_date_str of this Earning.  # noqa: E501

        Report date as non date format  # noqa: E501

        :return: The eps_report_date_str of this Earning.  # noqa: E501
        :rtype: str
        """
        return self._eps_report_date_str

    @eps_report_date_str.setter
    def eps_report_date_str(self, eps_report_date_str):
        """Sets the eps_report_date_str of this Earning.

        Report date as non date format  # noqa: E501

        :param eps_report_date_str: The eps_report_date_str of this Earning.  # noqa: E501
        :type: str
        """
        if eps_report_date_str is None:
            raise ValueError("Invalid value for `eps_report_date_str`, must not be `None`")  # noqa: E501

        self._eps_report_date_str = eps_report_date_str

    @property
    def fiscal_period(self):
        """Gets the fiscal_period of this Earning.  # noqa: E501


        :return: The fiscal_period of this Earning.  # noqa: E501
        :rtype: str
        """
        return self._fiscal_period

    @fiscal_period.setter
    def fiscal_period(self, fiscal_period):
        """Sets the fiscal_period of this Earning.


        :param fiscal_period: The fiscal_period of this Earning.  # noqa: E501
        :type: str
        """

        self._fiscal_period = fiscal_period

    @property
    def fiscal_end_date(self):
        """Gets the fiscal_end_date of this Earning.  # noqa: E501


        :return: The fiscal_end_date of this Earning.  # noqa: E501
        :rtype: datetime
        """
        return self._fiscal_end_date

    @fiscal_end_date.setter
    def fiscal_end_date(self, fiscal_end_date):
        """Sets the fiscal_end_date of this Earning.


        :param fiscal_end_date: The fiscal_end_date of this Earning.  # noqa: E501
        :type: datetime
        """

        self._fiscal_end_date = fiscal_end_date

    @property
    def actual_eps(self):
        """Gets the actual_eps of this Earning.  # noqa: E501


        :return: The actual_eps of this Earning.  # noqa: E501
        :rtype: float
        """
        return self._actual_eps

    @actual_eps.setter
    def actual_eps(self, actual_eps):
        """Sets the actual_eps of this Earning.


        :param actual_eps: The actual_eps of this Earning.  # noqa: E501
        :type: float
        """

        self._actual_eps = actual_eps

    @property
    def consensus_eps(self):
        """Gets the consensus_eps of this Earning.  # noqa: E501


        :return: The consensus_eps of this Earning.  # noqa: E501
        :rtype: float
        """
        return self._consensus_eps

    @consensus_eps.setter
    def consensus_eps(self, consensus_eps):
        """Sets the consensus_eps of this Earning.


        :param consensus_eps: The consensus_eps of this Earning.  # noqa: E501
        :type: float
        """

        self._consensus_eps = consensus_eps

    @property
    def estimated_eps(self):
        """Gets the estimated_eps of this Earning.  # noqa: E501


        :return: The estimated_eps of this Earning.  # noqa: E501
        :rtype: float
        """
        return self._estimated_eps

    @estimated_eps.setter
    def estimated_eps(self, estimated_eps):
        """Sets the estimated_eps of this Earning.


        :param estimated_eps: The estimated_eps of this Earning.  # noqa: E501
        :type: float
        """

        self._estimated_eps = estimated_eps

    @property
    def announce_time(self):
        """Gets the announce_time of this Earning.  # noqa: E501


        :return: The announce_time of this Earning.  # noqa: E501
        :rtype: str
        """
        return self._announce_time

    @announce_time.setter
    def announce_time(self, announce_time):
        """Sets the announce_time of this Earning.


        :param announce_time: The announce_time of this Earning.  # noqa: E501
        :type: str
        """

        self._announce_time = announce_time

    @property
    def number_of_estimates(self):
        """Gets the number_of_estimates of this Earning.  # noqa: E501


        :return: The number_of_estimates of this Earning.  # noqa: E501
        :rtype: float
        """
        return self._number_of_estimates

    @number_of_estimates.setter
    def number_of_estimates(self, number_of_estimates):
        """Sets the number_of_estimates of this Earning.


        :param number_of_estimates: The number_of_estimates of this Earning.  # noqa: E501
        :type: float
        """

        self._number_of_estimates = number_of_estimates

    @property
    def eps_surprise_dollar(self):
        """Gets the eps_surprise_dollar of this Earning.  # noqa: E501


        :return: The eps_surprise_dollar of this Earning.  # noqa: E501
        :rtype: float
        """
        return self._eps_surprise_dollar

    @eps_surprise_dollar.setter
    def eps_surprise_dollar(self, eps_surprise_dollar):
        """Sets the eps_surprise_dollar of this Earning.


        :param eps_surprise_dollar: The eps_surprise_dollar of this Earning.  # noqa: E501
        :type: float
        """

        self._eps_surprise_dollar = eps_surprise_dollar

    @property
    def year_ago(self):
        """Gets the year_ago of this Earning.  # noqa: E501


        :return: The year_ago of this Earning.  # noqa: E501
        :rtype: float
        """
        return self._year_ago

    @year_ago.setter
    def year_ago(self, year_ago):
        """Sets the year_ago of this Earning.


        :param year_ago: The year_ago of this Earning.  # noqa: E501
        :type: float
        """

        self._year_ago = year_ago

    @property
    def year_ago_change_percent(self):
        """Gets the year_ago_change_percent of this Earning.  # noqa: E501


        :return: The year_ago_change_percent of this Earning.  # noqa: E501
        :rtype: float
        """
        return self._year_ago_change_percent

    @year_ago_change_percent.setter
    def year_ago_change_percent(self, year_ago_change_percent):
        """Sets the year_ago_change_percent of this Earning.


        :param year_ago_change_percent: The year_ago_change_percent of this Earning.  # noqa: E501
        :type: float
        """

        self._year_ago_change_percent = year_ago_change_percent

    @property
    def estimated_change_percent(self):
        """Gets the estimated_change_percent of this Earning.  # noqa: E501


        :return: The estimated_change_percent of this Earning.  # noqa: E501
        :rtype: float
        """
        return self._estimated_change_percent

    @estimated_change_percent.setter
    def estimated_change_percent(self, estimated_change_percent):
        """Sets the estimated_change_percent of this Earning.


        :param estimated_change_percent: The estimated_change_percent of this Earning.  # noqa: E501
        :type: float
        """

        self._estimated_change_percent = estimated_change_percent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Earning, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Earning):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
