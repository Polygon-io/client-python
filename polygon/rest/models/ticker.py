# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Ticker(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticker': 'StockSymbol',
        'name': 'str',
        'market': 'str',
        'locale': 'str',
        'currency': 'str',
        'active': 'bool',
        'primary_exch': 'str',
        'url': 'str',
        'updated': 'datetime',
        'attrs': 'object',
        'codes': 'object'
    }

    attribute_map = {
        'ticker': 'ticker',
        'name': 'name',
        'market': 'market',
        'locale': 'locale',
        'currency': 'currency',
        'active': 'active',
        'primary_exch': 'primaryExch',
        'url': 'url',
        'updated': 'updated',
        'attrs': 'attrs',
        'codes': 'codes'
    }

    def __init__(self, ticker=None, name=None, market=None, locale=None, currency=None, active=None, primary_exch=None, url=None, updated=None, attrs=None, codes=None):  # noqa: E501
        """Ticker - a model defined in Swagger"""  # noqa: E501
        self._ticker = None
        self._name = None
        self._market = None
        self._locale = None
        self._currency = None
        self._active = None
        self._primary_exch = None
        self._url = None
        self._updated = None
        self._attrs = None
        self._codes = None
        self.discriminator = None
        self.ticker = ticker
        self.name = name
        self.market = market
        self.locale = locale
        if currency is not None:
            self.currency = currency
        if active is not None:
            self.active = active
        if primary_exch is not None:
            self.primary_exch = primary_exch
        if url is not None:
            self.url = url
        self.updated = updated
        if attrs is not None:
            self.attrs = attrs
        if codes is not None:
            self.codes = codes

    @property
    def ticker(self):
        """Gets the ticker of this Ticker.  # noqa: E501


        :return: The ticker of this Ticker.  # noqa: E501
        :rtype: StockSymbol
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this Ticker.


        :param ticker: The ticker of this Ticker.  # noqa: E501
        :type: StockSymbol
        """
        if ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")  # noqa: E501

        self._ticker = ticker

    @property
    def name(self):
        """Gets the name of this Ticker.  # noqa: E501

        Name of the item.  # noqa: E501

        :return: The name of this Ticker.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Ticker.

        Name of the item.  # noqa: E501

        :param name: The name of this Ticker.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def market(self):
        """Gets the market of this Ticker.  # noqa: E501

        The market in which this ticker participates  # noqa: E501

        :return: The market of this Ticker.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this Ticker.

        The market in which this ticker participates  # noqa: E501

        :param market: The market of this Ticker.  # noqa: E501
        :type: str
        """
        if market is None:
            raise ValueError("Invalid value for `market`, must not be `None`")  # noqa: E501

        self._market = market

    @property
    def locale(self):
        """Gets the locale of this Ticker.  # noqa: E501

        Locale of where this ticker is traded  # noqa: E501

        :return: The locale of this Ticker.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this Ticker.

        Locale of where this ticker is traded  # noqa: E501

        :param locale: The locale of this Ticker.  # noqa: E501
        :type: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")  # noqa: E501

        self._locale = locale

    @property
    def currency(self):
        """Gets the currency of this Ticker.  # noqa: E501

        Currency this ticker is traded in  # noqa: E501

        :return: The currency of this Ticker.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Ticker.

        Currency this ticker is traded in  # noqa: E501

        :param currency: The currency of this Ticker.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def active(self):
        """Gets the active of this Ticker.  # noqa: E501

        If the ticker is active. False means the ticker has been delisted  # noqa: E501

        :return: The active of this Ticker.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Ticker.

        If the ticker is active. False means the ticker has been delisted  # noqa: E501

        :param active: The active of this Ticker.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def primary_exch(self):
        """Gets the primary_exch of this Ticker.  # noqa: E501

        The listing exchange for this ticker  # noqa: E501

        :return: The primary_exch of this Ticker.  # noqa: E501
        :rtype: str
        """
        return self._primary_exch

    @primary_exch.setter
    def primary_exch(self, primary_exch):
        """Sets the primary_exch of this Ticker.

        The listing exchange for this ticker  # noqa: E501

        :param primary_exch: The primary_exch of this Ticker.  # noqa: E501
        :type: str
        """

        self._primary_exch = primary_exch

    @property
    def url(self):
        """Gets the url of this Ticker.  # noqa: E501

        URL of this ticker. Use this to get more information about the ticker.  # noqa: E501

        :return: The url of this Ticker.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Ticker.

        URL of this ticker. Use this to get more information about the ticker.  # noqa: E501

        :param url: The url of this Ticker.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def updated(self):
        """Gets the updated of this Ticker.  # noqa: E501

        Last time this ticker record was updated.  # noqa: E501

        :return: The updated of this Ticker.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Ticker.

        Last time this ticker record was updated.  # noqa: E501

        :param updated: The updated of this Ticker.  # noqa: E501
        :type: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def attrs(self):
        """Gets the attrs of this Ticker.  # noqa: E501

        Additional details about this ticker. No schema.  # noqa: E501

        :return: The attrs of this Ticker.  # noqa: E501
        :rtype: object
        """
        return self._attrs

    @attrs.setter
    def attrs(self, attrs):
        """Sets the attrs of this Ticker.

        Additional details about this ticker. No schema.  # noqa: E501

        :param attrs: The attrs of this Ticker.  # noqa: E501
        :type: object
        """

        self._attrs = attrs

    @property
    def codes(self):
        """Gets the codes of this Ticker.  # noqa: E501

        Additional details about this ticker. No schema.  # noqa: E501

        :return: The codes of this Ticker.  # noqa: E501
        :rtype: object
        """
        return self._codes

    @codes.setter
    def codes(self, codes):
        """Sets the codes of this Ticker.

        Additional details about this ticker. No schema.  # noqa: E501

        :param codes: The codes of this Ticker.  # noqa: E501
        :type: object
        """

        self._codes = codes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Ticker, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ticker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
