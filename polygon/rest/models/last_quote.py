# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LastQuote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'askprice': 'int',
        'asksize': 'int',
        'askexchange': 'int',
        'bidprice': 'int',
        'bidsize': 'int',
        'bidexchange': 'int',
        'timestamp': 'int'
    }

    attribute_map = {
        'askprice': 'askprice',
        'asksize': 'asksize',
        'askexchange': 'askexchange',
        'bidprice': 'bidprice',
        'bidsize': 'bidsize',
        'bidexchange': 'bidexchange',
        'timestamp': 'timestamp'
    }

    def __init__(self, askprice=None, asksize=None, askexchange=None, bidprice=None, bidsize=None, bidexchange=None, timestamp=None):  # noqa: E501
        """LastQuote - a model defined in Swagger"""  # noqa: E501
        self._askprice = None
        self._asksize = None
        self._askexchange = None
        self._bidprice = None
        self._bidsize = None
        self._bidexchange = None
        self._timestamp = None
        self.discriminator = None
        self.askprice = askprice
        self.asksize = asksize
        self.askexchange = askexchange
        self.bidprice = bidprice
        self.bidsize = bidsize
        self.bidexchange = bidexchange
        self.timestamp = timestamp

    @property
    def askprice(self):
        """Gets the askprice of this LastQuote.  # noqa: E501

        Ask Price  # noqa: E501

        :return: The askprice of this LastQuote.  # noqa: E501
        :rtype: int
        """
        return self._askprice

    @askprice.setter
    def askprice(self, askprice):
        """Sets the askprice of this LastQuote.

        Ask Price  # noqa: E501

        :param askprice: The askprice of this LastQuote.  # noqa: E501
        :type: int
        """
        if askprice is None:
            raise ValueError("Invalid value for `askprice`, must not be `None`")  # noqa: E501

        self._askprice = askprice

    @property
    def asksize(self):
        """Gets the asksize of this LastQuote.  # noqa: E501

        Ask Size  # noqa: E501

        :return: The asksize of this LastQuote.  # noqa: E501
        :rtype: int
        """
        return self._asksize

    @asksize.setter
    def asksize(self, asksize):
        """Sets the asksize of this LastQuote.

        Ask Size  # noqa: E501

        :param asksize: The asksize of this LastQuote.  # noqa: E501
        :type: int
        """
        if asksize is None:
            raise ValueError("Invalid value for `asksize`, must not be `None`")  # noqa: E501

        self._asksize = asksize

    @property
    def askexchange(self):
        """Gets the askexchange of this LastQuote.  # noqa: E501

        Exchange the ask happened on  # noqa: E501

        :return: The askexchange of this LastQuote.  # noqa: E501
        :rtype: int
        """
        return self._askexchange

    @askexchange.setter
    def askexchange(self, askexchange):
        """Sets the askexchange of this LastQuote.

        Exchange the ask happened on  # noqa: E501

        :param askexchange: The askexchange of this LastQuote.  # noqa: E501
        :type: int
        """
        if askexchange is None:
            raise ValueError("Invalid value for `askexchange`, must not be `None`")  # noqa: E501

        self._askexchange = askexchange

    @property
    def bidprice(self):
        """Gets the bidprice of this LastQuote.  # noqa: E501

        Bid Price  # noqa: E501

        :return: The bidprice of this LastQuote.  # noqa: E501
        :rtype: int
        """
        return self._bidprice

    @bidprice.setter
    def bidprice(self, bidprice):
        """Sets the bidprice of this LastQuote.

        Bid Price  # noqa: E501

        :param bidprice: The bidprice of this LastQuote.  # noqa: E501
        :type: int
        """
        if bidprice is None:
            raise ValueError("Invalid value for `bidprice`, must not be `None`")  # noqa: E501

        self._bidprice = bidprice

    @property
    def bidsize(self):
        """Gets the bidsize of this LastQuote.  # noqa: E501

        Bid Size  # noqa: E501

        :return: The bidsize of this LastQuote.  # noqa: E501
        :rtype: int
        """
        return self._bidsize

    @bidsize.setter
    def bidsize(self, bidsize):
        """Sets the bidsize of this LastQuote.

        Bid Size  # noqa: E501

        :param bidsize: The bidsize of this LastQuote.  # noqa: E501
        :type: int
        """
        if bidsize is None:
            raise ValueError("Invalid value for `bidsize`, must not be `None`")  # noqa: E501

        self._bidsize = bidsize

    @property
    def bidexchange(self):
        """Gets the bidexchange of this LastQuote.  # noqa: E501

        Exchange the bid happened on  # noqa: E501

        :return: The bidexchange of this LastQuote.  # noqa: E501
        :rtype: int
        """
        return self._bidexchange

    @bidexchange.setter
    def bidexchange(self, bidexchange):
        """Sets the bidexchange of this LastQuote.

        Exchange the bid happened on  # noqa: E501

        :param bidexchange: The bidexchange of this LastQuote.  # noqa: E501
        :type: int
        """
        if bidexchange is None:
            raise ValueError("Invalid value for `bidexchange`, must not be `None`")  # noqa: E501

        self._bidexchange = bidexchange

    @property
    def timestamp(self):
        """Gets the timestamp of this LastQuote.  # noqa: E501

        Timestamp of this trade  # noqa: E501

        :return: The timestamp of this LastQuote.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LastQuote.

        Timestamp of this trade  # noqa: E501

        :param timestamp: The timestamp of this LastQuote.  # noqa: E501
        :type: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LastQuote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LastQuote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
