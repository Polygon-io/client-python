# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LastForexTrade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price': 'int',
        'exchange': 'int',
        'timestamp': 'int'
    }

    attribute_map = {
        'price': 'price',
        'exchange': 'exchange',
        'timestamp': 'timestamp'
    }

    def __init__(self, price=None, exchange=None, timestamp=None):  # noqa: E501
        """LastForexTrade - a model defined in Swagger"""  # noqa: E501
        self._price = None
        self._exchange = None
        self._timestamp = None
        self.discriminator = None
        self.price = price
        self.exchange = exchange
        self.timestamp = timestamp

    @property
    def price(self):
        """Gets the price of this LastForexTrade.  # noqa: E501

        Price of the trade  # noqa: E501

        :return: The price of this LastForexTrade.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this LastForexTrade.

        Price of the trade  # noqa: E501

        :param price: The price of this LastForexTrade.  # noqa: E501
        :type: int
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def exchange(self):
        """Gets the exchange of this LastForexTrade.  # noqa: E501

        Exchange this trade happened on  # noqa: E501

        :return: The exchange of this LastForexTrade.  # noqa: E501
        :rtype: int
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this LastForexTrade.

        Exchange this trade happened on  # noqa: E501

        :param exchange: The exchange of this LastForexTrade.  # noqa: E501
        :type: int
        """
        if exchange is None:
            raise ValueError("Invalid value for `exchange`, must not be `None`")  # noqa: E501

        self._exchange = exchange

    @property
    def timestamp(self):
        """Gets the timestamp of this LastForexTrade.  # noqa: E501

        Timestamp of this trade  # noqa: E501

        :return: The timestamp of this LastForexTrade.  # noqa: E501
        :rtype: int
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this LastForexTrade.

        Timestamp of this trade  # noqa: E501

        :param timestamp: The timestamp of this LastForexTrade.  # noqa: E501
        :type: int
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LastForexTrade, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LastForexTrade):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
