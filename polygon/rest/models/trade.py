# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Trade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'c1': 'int',
        'c2': 'int',
        'c3': 'int',
        'c4': 'int',
        'e': 'str',
        'p': 'int',
        's': 'int',
        't': 'int'
    }

    attribute_map = {
        'c1': 'c1',
        'c2': 'c2',
        'c3': 'c3',
        'c4': 'c4',
        'e': 'e',
        'p': 'p',
        's': 's',
        't': 't'
    }

    def __init__(self, c1=None, c2=None, c3=None, c4=None, e=None, p=None, s=None, t=None):  # noqa: E501
        """Trade - a model defined in Swagger"""  # noqa: E501
        self._c1 = None
        self._c2 = None
        self._c3 = None
        self._c4 = None
        self._e = None
        self._p = None
        self._s = None
        self._t = None
        self.discriminator = None
        self.c1 = c1
        self.c2 = c2
        self.c3 = c3
        self.c4 = c4
        self.e = e
        self.p = p
        self.s = s
        self.t = t

    @property
    def c1(self):
        """Gets the c1 of this Trade.  # noqa: E501

        Condition 1 of this trade  # noqa: E501

        :return: The c1 of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._c1

    @c1.setter
    def c1(self, c1):
        """Sets the c1 of this Trade.

        Condition 1 of this trade  # noqa: E501

        :param c1: The c1 of this Trade.  # noqa: E501
        :type: int
        """
        if c1 is None:
            raise ValueError("Invalid value for `c1`, must not be `None`")  # noqa: E501

        self._c1 = c1

    @property
    def c2(self):
        """Gets the c2 of this Trade.  # noqa: E501

        Condition 2 of this trade  # noqa: E501

        :return: The c2 of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._c2

    @c2.setter
    def c2(self, c2):
        """Sets the c2 of this Trade.

        Condition 2 of this trade  # noqa: E501

        :param c2: The c2 of this Trade.  # noqa: E501
        :type: int
        """
        if c2 is None:
            raise ValueError("Invalid value for `c2`, must not be `None`")  # noqa: E501

        self._c2 = c2

    @property
    def c3(self):
        """Gets the c3 of this Trade.  # noqa: E501

        Condition 3 of this trade  # noqa: E501

        :return: The c3 of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._c3

    @c3.setter
    def c3(self, c3):
        """Sets the c3 of this Trade.

        Condition 3 of this trade  # noqa: E501

        :param c3: The c3 of this Trade.  # noqa: E501
        :type: int
        """
        if c3 is None:
            raise ValueError("Invalid value for `c3`, must not be `None`")  # noqa: E501

        self._c3 = c3

    @property
    def c4(self):
        """Gets the c4 of this Trade.  # noqa: E501

        Condition 4 of this trade  # noqa: E501

        :return: The c4 of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._c4

    @c4.setter
    def c4(self, c4):
        """Sets the c4 of this Trade.

        Condition 4 of this trade  # noqa: E501

        :param c4: The c4 of this Trade.  # noqa: E501
        :type: int
        """
        if c4 is None:
            raise ValueError("Invalid value for `c4`, must not be `None`")  # noqa: E501

        self._c4 = c4

    @property
    def e(self):
        """Gets the e of this Trade.  # noqa: E501

        The exchange this trade happened on  # noqa: E501

        :return: The e of this Trade.  # noqa: E501
        :rtype: str
        """
        return self._e

    @e.setter
    def e(self, e):
        """Sets the e of this Trade.

        The exchange this trade happened on  # noqa: E501

        :param e: The e of this Trade.  # noqa: E501
        :type: str
        """
        if e is None:
            raise ValueError("Invalid value for `e`, must not be `None`")  # noqa: E501

        self._e = e

    @property
    def p(self):
        """Gets the p of this Trade.  # noqa: E501

        Price of the trade  # noqa: E501

        :return: The p of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._p

    @p.setter
    def p(self, p):
        """Sets the p of this Trade.

        Price of the trade  # noqa: E501

        :param p: The p of this Trade.  # noqa: E501
        :type: int
        """
        if p is None:
            raise ValueError("Invalid value for `p`, must not be `None`")  # noqa: E501

        self._p = p

    @property
    def s(self):
        """Gets the s of this Trade.  # noqa: E501

        Size of the trade  # noqa: E501

        :return: The s of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._s

    @s.setter
    def s(self, s):
        """Sets the s of this Trade.

        Size of the trade  # noqa: E501

        :param s: The s of this Trade.  # noqa: E501
        :type: int
        """
        if s is None:
            raise ValueError("Invalid value for `s`, must not be `None`")  # noqa: E501

        self._s = s

    @property
    def t(self):
        """Gets the t of this Trade.  # noqa: E501

        Timestamp of this trade  # noqa: E501

        :return: The t of this Trade.  # noqa: E501
        :rtype: int
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this Trade.

        Timestamp of this trade  # noqa: E501

        :param t: The t of this Trade.  # noqa: E501
        :type: int
        """
        if t is None:
            raise ValueError("Invalid value for `t`, must not be `None`")  # noqa: E501

        self._t = t

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Trade, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Trade):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
