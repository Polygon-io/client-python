# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AggResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticker': 'str',
        'status': 'str',
        'adjusted': 'bool',
        'query_count': 'float',
        'results_count': 'float',
        'results': 'list[Aggv2]'
    }

    attribute_map = {
        'ticker': 'ticker',
        'status': 'status',
        'adjusted': 'adjusted',
        'query_count': 'queryCount',
        'results_count': 'resultsCount',
        'results': 'results'
    }

    def __init__(self, ticker=None, status=None, adjusted=None, query_count=None, results_count=None, results=None):  # noqa: E501
        """AggResponse - a model defined in Swagger"""  # noqa: E501
        self._ticker = None
        self._status = None
        self._adjusted = None
        self._query_count = None
        self._results_count = None
        self._results = None
        self.discriminator = None
        self.ticker = ticker
        self.status = status
        self.adjusted = adjusted
        if query_count is not None:
            self.query_count = query_count
        if results_count is not None:
            self.results_count = results_count
        self.results = results

    @property
    def ticker(self):
        """Gets the ticker of this AggResponse.  # noqa: E501

        Ticker symbol requested  # noqa: E501

        :return: The ticker of this AggResponse.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this AggResponse.

        Ticker symbol requested  # noqa: E501

        :param ticker: The ticker of this AggResponse.  # noqa: E501
        :type: str
        """
        if ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")  # noqa: E501

        self._ticker = ticker

    @property
    def status(self):
        """Gets the status of this AggResponse.  # noqa: E501

        Status of the response  # noqa: E501

        :return: The status of this AggResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AggResponse.

        Status of the response  # noqa: E501

        :param status: The status of this AggResponse.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def adjusted(self):
        """Gets the adjusted of this AggResponse.  # noqa: E501

        If this response was adjusted for splits  # noqa: E501

        :return: The adjusted of this AggResponse.  # noqa: E501
        :rtype: bool
        """
        return self._adjusted

    @adjusted.setter
    def adjusted(self, adjusted):
        """Sets the adjusted of this AggResponse.

        If this response was adjusted for splits  # noqa: E501

        :param adjusted: The adjusted of this AggResponse.  # noqa: E501
        :type: bool
        """
        if adjusted is None:
            raise ValueError("Invalid value for `adjusted`, must not be `None`")  # noqa: E501

        self._adjusted = adjusted

    @property
    def query_count(self):
        """Gets the query_count of this AggResponse.  # noqa: E501

        Number of aggregate ( min or day ) used to generate the response  # noqa: E501

        :return: The query_count of this AggResponse.  # noqa: E501
        :rtype: float
        """
        return self._query_count

    @query_count.setter
    def query_count(self, query_count):
        """Sets the query_count of this AggResponse.

        Number of aggregate ( min or day ) used to generate the response  # noqa: E501

        :param query_count: The query_count of this AggResponse.  # noqa: E501
        :type: float
        """

        self._query_count = query_count

    @property
    def results_count(self):
        """Gets the results_count of this AggResponse.  # noqa: E501

        Total number of results generated  # noqa: E501

        :return: The results_count of this AggResponse.  # noqa: E501
        :rtype: float
        """
        return self._results_count

    @results_count.setter
    def results_count(self, results_count):
        """Sets the results_count of this AggResponse.

        Total number of results generated  # noqa: E501

        :param results_count: The results_count of this AggResponse.  # noqa: E501
        :type: float
        """

        self._results_count = results_count

    @property
    def results(self):
        """Gets the results of this AggResponse.  # noqa: E501


        :return: The results of this AggResponse.  # noqa: E501
        :rtype: list[Aggv2]
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this AggResponse.


        :param results: The results of this AggResponse.  # noqa: E501
        :type: list[Aggv2]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")  # noqa: E501

        self._results = results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AggResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AggResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
