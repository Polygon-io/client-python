# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class CryptoTickJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'p': 'int',
        's': 'int',
        'x': 'int',
        'c': 'list[int]',
        't': 'int'
    }

    attribute_map = {
        'p': 'p',
        's': 's',
        'x': 'x',
        'c': 'c',
        't': 't'
    }

    def __init__(self, p=None, s=None, x=None, c=None, t=None):  # noqa: E501
        """CryptoTickJson - a model defined in Swagger"""  # noqa: E501
        self._p = None
        self._s = None
        self._x = None
        self._c = None
        self._t = None
        self.discriminator = None
        self.p = p
        self.s = s
        self.x = x
        self.c = c
        self.t = t

    @property
    def p(self):
        """Gets the p of this CryptoTickJson.  # noqa: E501

        Trade Price  # noqa: E501

        :return: The p of this CryptoTickJson.  # noqa: E501
        :rtype: int
        """
        return self._p

    @p.setter
    def p(self, p):
        """Sets the p of this CryptoTickJson.

        Trade Price  # noqa: E501

        :param p: The p of this CryptoTickJson.  # noqa: E501
        :type: int
        """
        if p is None:
            raise ValueError("Invalid value for `p`, must not be `None`")  # noqa: E501

        self._p = p

    @property
    def s(self):
        """Gets the s of this CryptoTickJson.  # noqa: E501

        Size of the trade  # noqa: E501

        :return: The s of this CryptoTickJson.  # noqa: E501
        :rtype: int
        """
        return self._s

    @s.setter
    def s(self, s):
        """Sets the s of this CryptoTickJson.

        Size of the trade  # noqa: E501

        :param s: The s of this CryptoTickJson.  # noqa: E501
        :type: int
        """
        if s is None:
            raise ValueError("Invalid value for `s`, must not be `None`")  # noqa: E501

        self._s = s

    @property
    def x(self):
        """Gets the x of this CryptoTickJson.  # noqa: E501

        Exchange the trade occured on  # noqa: E501

        :return: The x of this CryptoTickJson.  # noqa: E501
        :rtype: int
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this CryptoTickJson.

        Exchange the trade occured on  # noqa: E501

        :param x: The x of this CryptoTickJson.  # noqa: E501
        :type: int
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")  # noqa: E501

        self._x = x

    @property
    def c(self):
        """Gets the c of this CryptoTickJson.  # noqa: E501

        Conditions of this trade  # noqa: E501

        :return: The c of this CryptoTickJson.  # noqa: E501
        :rtype: list[int]
        """
        return self._c

    @c.setter
    def c(self, c):
        """Sets the c of this CryptoTickJson.

        Conditions of this trade  # noqa: E501

        :param c: The c of this CryptoTickJson.  # noqa: E501
        :type: list[int]
        """
        if c is None:
            raise ValueError("Invalid value for `c`, must not be `None`")  # noqa: E501

        self._c = c

    @property
    def t(self):
        """Gets the t of this CryptoTickJson.  # noqa: E501

        Timestamp of this trade  # noqa: E501

        :return: The t of this CryptoTickJson.  # noqa: E501
        :rtype: int
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this CryptoTickJson.

        Timestamp of this trade  # noqa: E501

        :param t: The t of this CryptoTickJson.  # noqa: E501
        :type: int
        """
        if t is None:
            raise ValueError("Invalid value for `t`, must not be `None`")  # noqa: E501

        self._t = t

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CryptoTickJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CryptoTickJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
