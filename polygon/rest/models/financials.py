# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Financials(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticker': 'TickerSymbol',
        'period': 'str',
        'calendar_date': 'datetime',
        'report_period': 'datetime',
        'updated': 'datetime',
        'accumulated_other_comprehensive_income': 'int',
        'assets': 'int',
        'assets_average': 'int',
        'assets_current': 'int',
        'asset_turnover': 'int',
        'assets_non_current': 'int',
        'book_value_per_share': 'int',
        'capital_expenditure': 'int',
        'cash_and_equivalents': 'int',
        'cash_and_equivalents_usd': 'int',
        'cost_of_revenue': 'int',
        'consolidated_income': 'int',
        'current_ratio': 'int',
        'debt_to_equity_ratio': 'int',
        'debt': 'int',
        'debt_current': 'int',
        'debt_non_current': 'int',
        'debt_usd': 'int',
        'deferred_revenue': 'int',
        'depreciation_amortization_and_accretion': 'int',
        'deposits': 'int',
        'dividend_yield': 'int',
        'dividends_per_basic_common_share': 'int',
        'earning_before_interest_taxes': 'int',
        'earnings_before_interest_taxes_depreciation_amortization': 'int',
        'ebitda_margin': 'int',
        'earnings_before_interest_taxes_depreciation_amortization_usd': 'int',
        'earning_before_interest_taxes_usd': 'int',
        'earnings_before_tax': 'int',
        'earnings_per_basic_share': 'int',
        'earnings_per_diluted_share': 'int',
        'earnings_per_basic_share_usd': 'int',
        'shareholders_equity': 'int',
        'average_equity': 'int',
        'shareholders_equity_usd': 'int',
        'enterprise_value': 'int',
        'enterprise_value_over_ebit': 'int',
        'enterprise_value_over_ebitda': 'int',
        'free_cash_flow': 'int',
        'free_cash_flow_per_share': 'int',
        'foreign_currency_usd_exchange_rate': 'int',
        'gross_profit': 'int',
        'gross_margin': 'int',
        'goodwill_and_intangible_assets': 'int',
        'interest_expense': 'int',
        'invested_capital': 'int',
        'invested_capital_average': 'int',
        'inventory': 'int',
        'investments': 'int',
        'investments_current': 'int',
        'investments_non_current': 'int',
        'total_liabilities': 'int',
        'current_liabilities': 'int',
        'liabilities_non_current': 'int',
        'market_capitalization': 'int',
        'net_cash_flow': 'int',
        'net_cash_flow_business_acquisitions_disposals': 'int',
        'issuance_equity_shares': 'int',
        'issuance_debt_securities': 'int',
        'payment_dividends_other_cash_distributions': 'int',
        'net_cash_flow_from_financing': 'int',
        'net_cash_flow_from_investing': 'int',
        'net_cash_flow_investment_acquisitions_disposals': 'int',
        'net_cash_flow_from_operations': 'int',
        'effect_of_exchange_rate_changes_on_cash': 'int',
        'net_income': 'int',
        'net_income_common_stock': 'int',
        'net_income_common_stock_usd': 'int',
        'net_loss_income_from_discontinued_operations': 'int',
        'net_income_to_non_controlling_interests': 'int',
        'profit_margin': 'int',
        'operating_expenses': 'int',
        'operating_income': 'int',
        'trade_and_non_trade_payables': 'int',
        'payout_ratio': 'int',
        'price_to_book_value': 'int',
        'price_earnings': 'int',
        'price_to_earnings_ratio': 'int',
        'property_plant_equipment_net': 'int',
        'preferred_dividends_income_statement_impact': 'int',
        'share_price_adjusted_close': 'int',
        'price_sales': 'int',
        'price_to_sales_ratio': 'int',
        'trade_and_non_trade_receivables': 'int',
        'accumulated_retained_earnings_deficit': 'int',
        'revenues': 'int',
        'revenues_usd': 'int',
        'research_and_development_expense': 'int',
        'return_on_average_assets': 'int',
        'return_on_average_equity': 'int',
        'return_on_invested_capital': 'int',
        'return_on_sales': 'int',
        'share_based_compensation': 'int',
        'selling_general_and_administrative_expense': 'int',
        'share_factor': 'int',
        'shares': 'int',
        'weighted_average_shares': 'int',
        'weighted_average_shares_diluted': 'int',
        'sales_per_share': 'int',
        'tangible_asset_value': 'int',
        'tax_assets': 'int',
        'income_tax_expense': 'int',
        'tax_liabilities': 'int',
        'tangible_assets_book_value_per_share': 'int',
        'working_capital': 'int'
    }

    attribute_map = {
        'ticker': 'ticker',
        'period': 'period',
        'calendar_date': 'calendarDate',
        'report_period': 'reportPeriod',
        'updated': 'updated',
        'accumulated_other_comprehensive_income': 'accumulatedOtherComprehensiveIncome',
        'assets': 'assets',
        'assets_average': 'assetsAverage',
        'assets_current': 'assetsCurrent',
        'asset_turnover': 'assetTurnover',
        'assets_non_current': 'assetsNonCurrent',
        'book_value_per_share': 'bookValuePerShare',
        'capital_expenditure': 'capitalExpenditure',
        'cash_and_equivalents': 'cashAndEquivalents',
        'cash_and_equivalents_usd': 'cashAndEquivalentsUSD',
        'cost_of_revenue': 'costOfRevenue',
        'consolidated_income': 'consolidatedIncome',
        'current_ratio': 'currentRatio',
        'debt_to_equity_ratio': 'debtToEquityRatio',
        'debt': 'debt',
        'debt_current': 'debtCurrent',
        'debt_non_current': 'debtNonCurrent',
        'debt_usd': 'debtUSD',
        'deferred_revenue': 'deferredRevenue',
        'depreciation_amortization_and_accretion': 'depreciationAmortizationAndAccretion',
        'deposits': 'deposits',
        'dividend_yield': 'dividendYield',
        'dividends_per_basic_common_share': 'dividendsPerBasicCommonShare',
        'earning_before_interest_taxes': 'earningBeforeInterestTaxes',
        'earnings_before_interest_taxes_depreciation_amortization': 'earningsBeforeInterestTaxesDepreciationAmortization',
        'ebitda_margin': 'EBITDAMargin',
        'earnings_before_interest_taxes_depreciation_amortization_usd': 'earningsBeforeInterestTaxesDepreciationAmortizationUSD',
        'earning_before_interest_taxes_usd': 'earningBeforeInterestTaxesUSD',
        'earnings_before_tax': 'earningsBeforeTax',
        'earnings_per_basic_share': 'earningsPerBasicShare',
        'earnings_per_diluted_share': 'earningsPerDilutedShare',
        'earnings_per_basic_share_usd': 'earningsPerBasicShareUSD',
        'shareholders_equity': 'shareholdersEquity',
        'average_equity': 'averageEquity',
        'shareholders_equity_usd': 'shareholdersEquityUSD',
        'enterprise_value': 'enterpriseValue',
        'enterprise_value_over_ebit': 'enterpriseValueOverEBIT',
        'enterprise_value_over_ebitda': 'enterpriseValueOverEBITDA',
        'free_cash_flow': 'freeCashFlow',
        'free_cash_flow_per_share': 'freeCashFlowPerShare',
        'foreign_currency_usd_exchange_rate': 'foreignCurrencyUSDExchangeRate',
        'gross_profit': 'grossProfit',
        'gross_margin': 'grossMargin',
        'goodwill_and_intangible_assets': 'goodwillAndIntangibleAssets',
        'interest_expense': 'interestExpense',
        'invested_capital': 'investedCapital',
        'invested_capital_average': 'investedCapitalAverage',
        'inventory': 'inventory',
        'investments': 'investments',
        'investments_current': 'investmentsCurrent',
        'investments_non_current': 'investmentsNonCurrent',
        'total_liabilities': 'totalLiabilities',
        'current_liabilities': 'currentLiabilities',
        'liabilities_non_current': 'liabilitiesNonCurrent',
        'market_capitalization': 'marketCapitalization',
        'net_cash_flow': 'netCashFlow',
        'net_cash_flow_business_acquisitions_disposals': 'netCashFlowBusinessAcquisitionsDisposals',
        'issuance_equity_shares': 'issuanceEquityShares',
        'issuance_debt_securities': 'issuanceDebtSecurities',
        'payment_dividends_other_cash_distributions': 'paymentDividendsOtherCashDistributions',
        'net_cash_flow_from_financing': 'netCashFlowFromFinancing',
        'net_cash_flow_from_investing': 'netCashFlowFromInvesting',
        'net_cash_flow_investment_acquisitions_disposals': 'netCashFlowInvestmentAcquisitionsDisposals',
        'net_cash_flow_from_operations': 'netCashFlowFromOperations',
        'effect_of_exchange_rate_changes_on_cash': 'effectOfExchangeRateChangesOnCash',
        'net_income': 'netIncome',
        'net_income_common_stock': 'netIncomeCommonStock',
        'net_income_common_stock_usd': 'netIncomeCommonStockUSD',
        'net_loss_income_from_discontinued_operations': 'netLossIncomeFromDiscontinuedOperations',
        'net_income_to_non_controlling_interests': 'netIncomeToNonControllingInterests',
        'profit_margin': 'profitMargin',
        'operating_expenses': 'operatingExpenses',
        'operating_income': 'operatingIncome',
        'trade_and_non_trade_payables': 'tradeAndNonTradePayables',
        'payout_ratio': 'payoutRatio',
        'price_to_book_value': 'priceToBookValue',
        'price_earnings': 'priceEarnings',
        'price_to_earnings_ratio': 'priceToEarningsRatio',
        'property_plant_equipment_net': 'propertyPlantEquipmentNet',
        'preferred_dividends_income_statement_impact': 'preferredDividendsIncomeStatementImpact',
        'share_price_adjusted_close': 'sharePriceAdjustedClose',
        'price_sales': 'priceSales',
        'price_to_sales_ratio': 'priceToSalesRatio',
        'trade_and_non_trade_receivables': 'tradeAndNonTradeReceivables',
        'accumulated_retained_earnings_deficit': 'accumulatedRetainedEarningsDeficit',
        'revenues': 'revenues',
        'revenues_usd': 'revenuesUSD',
        'research_and_development_expense': 'researchAndDevelopmentExpense',
        'return_on_average_assets': 'returnOnAverageAssets',
        'return_on_average_equity': 'returnOnAverageEquity',
        'return_on_invested_capital': 'returnOnInvestedCapital',
        'return_on_sales': 'returnOnSales',
        'share_based_compensation': 'shareBasedCompensation',
        'selling_general_and_administrative_expense': 'sellingGeneralAndAdministrativeExpense',
        'share_factor': 'shareFactor',
        'shares': 'shares',
        'weighted_average_shares': 'weightedAverageShares',
        'weighted_average_shares_diluted': 'weightedAverageSharesDiluted',
        'sales_per_share': 'salesPerShare',
        'tangible_asset_value': 'tangibleAssetValue',
        'tax_assets': 'taxAssets',
        'income_tax_expense': 'incomeTaxExpense',
        'tax_liabilities': 'taxLiabilities',
        'tangible_assets_book_value_per_share': 'tangibleAssetsBookValuePerShare',
        'working_capital': 'workingCapital'
    }

    def __init__(self, ticker=None, period=None, calendar_date=None, report_period=None, updated=None, accumulated_other_comprehensive_income=None, assets=None, assets_average=None, assets_current=None, asset_turnover=None, assets_non_current=None, book_value_per_share=None, capital_expenditure=None, cash_and_equivalents=None, cash_and_equivalents_usd=None, cost_of_revenue=None, consolidated_income=None, current_ratio=None, debt_to_equity_ratio=None, debt=None, debt_current=None, debt_non_current=None, debt_usd=None, deferred_revenue=None, depreciation_amortization_and_accretion=None, deposits=None, dividend_yield=None, dividends_per_basic_common_share=None, earning_before_interest_taxes=None, earnings_before_interest_taxes_depreciation_amortization=None, ebitda_margin=None, earnings_before_interest_taxes_depreciation_amortization_usd=None, earning_before_interest_taxes_usd=None, earnings_before_tax=None, earnings_per_basic_share=None, earnings_per_diluted_share=None, earnings_per_basic_share_usd=None, shareholders_equity=None, average_equity=None, shareholders_equity_usd=None, enterprise_value=None, enterprise_value_over_ebit=None, enterprise_value_over_ebitda=None, free_cash_flow=None, free_cash_flow_per_share=None, foreign_currency_usd_exchange_rate=None, gross_profit=None, gross_margin=None, goodwill_and_intangible_assets=None, interest_expense=None, invested_capital=None, invested_capital_average=None, inventory=None, investments=None, investments_current=None, investments_non_current=None, total_liabilities=None, current_liabilities=None, liabilities_non_current=None, market_capitalization=None, net_cash_flow=None, net_cash_flow_business_acquisitions_disposals=None, issuance_equity_shares=None, issuance_debt_securities=None, payment_dividends_other_cash_distributions=None, net_cash_flow_from_financing=None, net_cash_flow_from_investing=None, net_cash_flow_investment_acquisitions_disposals=None, net_cash_flow_from_operations=None, effect_of_exchange_rate_changes_on_cash=None, net_income=None, net_income_common_stock=None, net_income_common_stock_usd=None, net_loss_income_from_discontinued_operations=None, net_income_to_non_controlling_interests=None, profit_margin=None, operating_expenses=None, operating_income=None, trade_and_non_trade_payables=None, payout_ratio=None, price_to_book_value=None, price_earnings=None, price_to_earnings_ratio=None, property_plant_equipment_net=None, preferred_dividends_income_statement_impact=None, share_price_adjusted_close=None, price_sales=None, price_to_sales_ratio=None, trade_and_non_trade_receivables=None, accumulated_retained_earnings_deficit=None, revenues=None, revenues_usd=None, research_and_development_expense=None, return_on_average_assets=None, return_on_average_equity=None, return_on_invested_capital=None, return_on_sales=None, share_based_compensation=None, selling_general_and_administrative_expense=None, share_factor=None, shares=None, weighted_average_shares=None, weighted_average_shares_diluted=None, sales_per_share=None, tangible_asset_value=None, tax_assets=None, income_tax_expense=None, tax_liabilities=None, tangible_assets_book_value_per_share=None, working_capital=None):  # noqa: E501
        """Financials - a model defined in Swagger"""  # noqa: E501
        self._ticker = None
        self._period = None
        self._calendar_date = None
        self._report_period = None
        self._updated = None
        self._accumulated_other_comprehensive_income = None
        self._assets = None
        self._assets_average = None
        self._assets_current = None
        self._asset_turnover = None
        self._assets_non_current = None
        self._book_value_per_share = None
        self._capital_expenditure = None
        self._cash_and_equivalents = None
        self._cash_and_equivalents_usd = None
        self._cost_of_revenue = None
        self._consolidated_income = None
        self._current_ratio = None
        self._debt_to_equity_ratio = None
        self._debt = None
        self._debt_current = None
        self._debt_non_current = None
        self._debt_usd = None
        self._deferred_revenue = None
        self._depreciation_amortization_and_accretion = None
        self._deposits = None
        self._dividend_yield = None
        self._dividends_per_basic_common_share = None
        self._earning_before_interest_taxes = None
        self._earnings_before_interest_taxes_depreciation_amortization = None
        self._ebitda_margin = None
        self._earnings_before_interest_taxes_depreciation_amortization_usd = None
        self._earning_before_interest_taxes_usd = None
        self._earnings_before_tax = None
        self._earnings_per_basic_share = None
        self._earnings_per_diluted_share = None
        self._earnings_per_basic_share_usd = None
        self._shareholders_equity = None
        self._average_equity = None
        self._shareholders_equity_usd = None
        self._enterprise_value = None
        self._enterprise_value_over_ebit = None
        self._enterprise_value_over_ebitda = None
        self._free_cash_flow = None
        self._free_cash_flow_per_share = None
        self._foreign_currency_usd_exchange_rate = None
        self._gross_profit = None
        self._gross_margin = None
        self._goodwill_and_intangible_assets = None
        self._interest_expense = None
        self._invested_capital = None
        self._invested_capital_average = None
        self._inventory = None
        self._investments = None
        self._investments_current = None
        self._investments_non_current = None
        self._total_liabilities = None
        self._current_liabilities = None
        self._liabilities_non_current = None
        self._market_capitalization = None
        self._net_cash_flow = None
        self._net_cash_flow_business_acquisitions_disposals = None
        self._issuance_equity_shares = None
        self._issuance_debt_securities = None
        self._payment_dividends_other_cash_distributions = None
        self._net_cash_flow_from_financing = None
        self._net_cash_flow_from_investing = None
        self._net_cash_flow_investment_acquisitions_disposals = None
        self._net_cash_flow_from_operations = None
        self._effect_of_exchange_rate_changes_on_cash = None
        self._net_income = None
        self._net_income_common_stock = None
        self._net_income_common_stock_usd = None
        self._net_loss_income_from_discontinued_operations = None
        self._net_income_to_non_controlling_interests = None
        self._profit_margin = None
        self._operating_expenses = None
        self._operating_income = None
        self._trade_and_non_trade_payables = None
        self._payout_ratio = None
        self._price_to_book_value = None
        self._price_earnings = None
        self._price_to_earnings_ratio = None
        self._property_plant_equipment_net = None
        self._preferred_dividends_income_statement_impact = None
        self._share_price_adjusted_close = None
        self._price_sales = None
        self._price_to_sales_ratio = None
        self._trade_and_non_trade_receivables = None
        self._accumulated_retained_earnings_deficit = None
        self._revenues = None
        self._revenues_usd = None
        self._research_and_development_expense = None
        self._return_on_average_assets = None
        self._return_on_average_equity = None
        self._return_on_invested_capital = None
        self._return_on_sales = None
        self._share_based_compensation = None
        self._selling_general_and_administrative_expense = None
        self._share_factor = None
        self._shares = None
        self._weighted_average_shares = None
        self._weighted_average_shares_diluted = None
        self._sales_per_share = None
        self._tangible_asset_value = None
        self._tax_assets = None
        self._income_tax_expense = None
        self._tax_liabilities = None
        self._tangible_assets_book_value_per_share = None
        self._working_capital = None
        self.discriminator = None
        self.ticker = ticker
        if period is not None:
            self.period = period
        if calendar_date is not None:
            self.calendar_date = calendar_date
        if report_period is not None:
            self.report_period = report_period
        if updated is not None:
            self.updated = updated
        if accumulated_other_comprehensive_income is not None:
            self.accumulated_other_comprehensive_income = accumulated_other_comprehensive_income
        if assets is not None:
            self.assets = assets
        if assets_average is not None:
            self.assets_average = assets_average
        if assets_current is not None:
            self.assets_current = assets_current
        if asset_turnover is not None:
            self.asset_turnover = asset_turnover
        if assets_non_current is not None:
            self.assets_non_current = assets_non_current
        if book_value_per_share is not None:
            self.book_value_per_share = book_value_per_share
        if capital_expenditure is not None:
            self.capital_expenditure = capital_expenditure
        if cash_and_equivalents is not None:
            self.cash_and_equivalents = cash_and_equivalents
        if cash_and_equivalents_usd is not None:
            self.cash_and_equivalents_usd = cash_and_equivalents_usd
        if cost_of_revenue is not None:
            self.cost_of_revenue = cost_of_revenue
        if consolidated_income is not None:
            self.consolidated_income = consolidated_income
        if current_ratio is not None:
            self.current_ratio = current_ratio
        if debt_to_equity_ratio is not None:
            self.debt_to_equity_ratio = debt_to_equity_ratio
        if debt is not None:
            self.debt = debt
        if debt_current is not None:
            self.debt_current = debt_current
        if debt_non_current is not None:
            self.debt_non_current = debt_non_current
        if debt_usd is not None:
            self.debt_usd = debt_usd
        if deferred_revenue is not None:
            self.deferred_revenue = deferred_revenue
        if depreciation_amortization_and_accretion is not None:
            self.depreciation_amortization_and_accretion = depreciation_amortization_and_accretion
        if deposits is not None:
            self.deposits = deposits
        if dividend_yield is not None:
            self.dividend_yield = dividend_yield
        if dividends_per_basic_common_share is not None:
            self.dividends_per_basic_common_share = dividends_per_basic_common_share
        if earning_before_interest_taxes is not None:
            self.earning_before_interest_taxes = earning_before_interest_taxes
        if earnings_before_interest_taxes_depreciation_amortization is not None:
            self.earnings_before_interest_taxes_depreciation_amortization = earnings_before_interest_taxes_depreciation_amortization
        if ebitda_margin is not None:
            self.ebitda_margin = ebitda_margin
        if earnings_before_interest_taxes_depreciation_amortization_usd is not None:
            self.earnings_before_interest_taxes_depreciation_amortization_usd = earnings_before_interest_taxes_depreciation_amortization_usd
        if earning_before_interest_taxes_usd is not None:
            self.earning_before_interest_taxes_usd = earning_before_interest_taxes_usd
        if earnings_before_tax is not None:
            self.earnings_before_tax = earnings_before_tax
        if earnings_per_basic_share is not None:
            self.earnings_per_basic_share = earnings_per_basic_share
        if earnings_per_diluted_share is not None:
            self.earnings_per_diluted_share = earnings_per_diluted_share
        if earnings_per_basic_share_usd is not None:
            self.earnings_per_basic_share_usd = earnings_per_basic_share_usd
        if shareholders_equity is not None:
            self.shareholders_equity = shareholders_equity
        if average_equity is not None:
            self.average_equity = average_equity
        if shareholders_equity_usd is not None:
            self.shareholders_equity_usd = shareholders_equity_usd
        if enterprise_value is not None:
            self.enterprise_value = enterprise_value
        if enterprise_value_over_ebit is not None:
            self.enterprise_value_over_ebit = enterprise_value_over_ebit
        if enterprise_value_over_ebitda is not None:
            self.enterprise_value_over_ebitda = enterprise_value_over_ebitda
        if free_cash_flow is not None:
            self.free_cash_flow = free_cash_flow
        if free_cash_flow_per_share is not None:
            self.free_cash_flow_per_share = free_cash_flow_per_share
        if foreign_currency_usd_exchange_rate is not None:
            self.foreign_currency_usd_exchange_rate = foreign_currency_usd_exchange_rate
        if gross_profit is not None:
            self.gross_profit = gross_profit
        if gross_margin is not None:
            self.gross_margin = gross_margin
        if goodwill_and_intangible_assets is not None:
            self.goodwill_and_intangible_assets = goodwill_and_intangible_assets
        if interest_expense is not None:
            self.interest_expense = interest_expense
        if invested_capital is not None:
            self.invested_capital = invested_capital
        if invested_capital_average is not None:
            self.invested_capital_average = invested_capital_average
        if inventory is not None:
            self.inventory = inventory
        if investments is not None:
            self.investments = investments
        if investments_current is not None:
            self.investments_current = investments_current
        if investments_non_current is not None:
            self.investments_non_current = investments_non_current
        if total_liabilities is not None:
            self.total_liabilities = total_liabilities
        if current_liabilities is not None:
            self.current_liabilities = current_liabilities
        if liabilities_non_current is not None:
            self.liabilities_non_current = liabilities_non_current
        if market_capitalization is not None:
            self.market_capitalization = market_capitalization
        if net_cash_flow is not None:
            self.net_cash_flow = net_cash_flow
        if net_cash_flow_business_acquisitions_disposals is not None:
            self.net_cash_flow_business_acquisitions_disposals = net_cash_flow_business_acquisitions_disposals
        if issuance_equity_shares is not None:
            self.issuance_equity_shares = issuance_equity_shares
        if issuance_debt_securities is not None:
            self.issuance_debt_securities = issuance_debt_securities
        if payment_dividends_other_cash_distributions is not None:
            self.payment_dividends_other_cash_distributions = payment_dividends_other_cash_distributions
        if net_cash_flow_from_financing is not None:
            self.net_cash_flow_from_financing = net_cash_flow_from_financing
        if net_cash_flow_from_investing is not None:
            self.net_cash_flow_from_investing = net_cash_flow_from_investing
        if net_cash_flow_investment_acquisitions_disposals is not None:
            self.net_cash_flow_investment_acquisitions_disposals = net_cash_flow_investment_acquisitions_disposals
        if net_cash_flow_from_operations is not None:
            self.net_cash_flow_from_operations = net_cash_flow_from_operations
        if effect_of_exchange_rate_changes_on_cash is not None:
            self.effect_of_exchange_rate_changes_on_cash = effect_of_exchange_rate_changes_on_cash
        if net_income is not None:
            self.net_income = net_income
        if net_income_common_stock is not None:
            self.net_income_common_stock = net_income_common_stock
        if net_income_common_stock_usd is not None:
            self.net_income_common_stock_usd = net_income_common_stock_usd
        if net_loss_income_from_discontinued_operations is not None:
            self.net_loss_income_from_discontinued_operations = net_loss_income_from_discontinued_operations
        if net_income_to_non_controlling_interests is not None:
            self.net_income_to_non_controlling_interests = net_income_to_non_controlling_interests
        if profit_margin is not None:
            self.profit_margin = profit_margin
        if operating_expenses is not None:
            self.operating_expenses = operating_expenses
        if operating_income is not None:
            self.operating_income = operating_income
        if trade_and_non_trade_payables is not None:
            self.trade_and_non_trade_payables = trade_and_non_trade_payables
        if payout_ratio is not None:
            self.payout_ratio = payout_ratio
        if price_to_book_value is not None:
            self.price_to_book_value = price_to_book_value
        if price_earnings is not None:
            self.price_earnings = price_earnings
        if price_to_earnings_ratio is not None:
            self.price_to_earnings_ratio = price_to_earnings_ratio
        if property_plant_equipment_net is not None:
            self.property_plant_equipment_net = property_plant_equipment_net
        if preferred_dividends_income_statement_impact is not None:
            self.preferred_dividends_income_statement_impact = preferred_dividends_income_statement_impact
        if share_price_adjusted_close is not None:
            self.share_price_adjusted_close = share_price_adjusted_close
        if price_sales is not None:
            self.price_sales = price_sales
        if price_to_sales_ratio is not None:
            self.price_to_sales_ratio = price_to_sales_ratio
        if trade_and_non_trade_receivables is not None:
            self.trade_and_non_trade_receivables = trade_and_non_trade_receivables
        if accumulated_retained_earnings_deficit is not None:
            self.accumulated_retained_earnings_deficit = accumulated_retained_earnings_deficit
        if revenues is not None:
            self.revenues = revenues
        if revenues_usd is not None:
            self.revenues_usd = revenues_usd
        if research_and_development_expense is not None:
            self.research_and_development_expense = research_and_development_expense
        if return_on_average_assets is not None:
            self.return_on_average_assets = return_on_average_assets
        if return_on_average_equity is not None:
            self.return_on_average_equity = return_on_average_equity
        if return_on_invested_capital is not None:
            self.return_on_invested_capital = return_on_invested_capital
        if return_on_sales is not None:
            self.return_on_sales = return_on_sales
        if share_based_compensation is not None:
            self.share_based_compensation = share_based_compensation
        if selling_general_and_administrative_expense is not None:
            self.selling_general_and_administrative_expense = selling_general_and_administrative_expense
        if share_factor is not None:
            self.share_factor = share_factor
        if shares is not None:
            self.shares = shares
        if weighted_average_shares is not None:
            self.weighted_average_shares = weighted_average_shares
        if weighted_average_shares_diluted is not None:
            self.weighted_average_shares_diluted = weighted_average_shares_diluted
        if sales_per_share is not None:
            self.sales_per_share = sales_per_share
        if tangible_asset_value is not None:
            self.tangible_asset_value = tangible_asset_value
        if tax_assets is not None:
            self.tax_assets = tax_assets
        if income_tax_expense is not None:
            self.income_tax_expense = income_tax_expense
        if tax_liabilities is not None:
            self.tax_liabilities = tax_liabilities
        if tangible_assets_book_value_per_share is not None:
            self.tangible_assets_book_value_per_share = tangible_assets_book_value_per_share
        if working_capital is not None:
            self.working_capital = working_capital

    @property
    def ticker(self):
        """Gets the ticker of this Financials.  # noqa: E501


        :return: The ticker of this Financials.  # noqa: E501
        :rtype: TickerSymbol
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this Financials.


        :param ticker: The ticker of this Financials.  # noqa: E501
        :type: TickerSymbol
        """
        if ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")  # noqa: E501

        self._ticker = ticker

    @property
    def period(self):
        """Gets the period of this Financials.  # noqa: E501

        Reporting period.  # noqa: E501

        :return: The period of this Financials.  # noqa: E501
        :rtype: str
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Financials.

        Reporting period.  # noqa: E501

        :param period: The period of this Financials.  # noqa: E501
        :type: str
        """
        allowed_values = ["Q", "T", "QA", "TA", "Y", "YA"]  # noqa: E501
        if period not in allowed_values:
            raise ValueError(
                "Invalid value for `period` ({0}), must be one of {1}"  # noqa: E501
                .format(period, allowed_values)
            )

        self._period = period

    @property
    def calendar_date(self):
        """Gets the calendar_date of this Financials.  # noqa: E501


        :return: The calendar_date of this Financials.  # noqa: E501
        :rtype: datetime
        """
        return self._calendar_date

    @calendar_date.setter
    def calendar_date(self, calendar_date):
        """Sets the calendar_date of this Financials.


        :param calendar_date: The calendar_date of this Financials.  # noqa: E501
        :type: datetime
        """

        self._calendar_date = calendar_date

    @property
    def report_period(self):
        """Gets the report_period of this Financials.  # noqa: E501


        :return: The report_period of this Financials.  # noqa: E501
        :rtype: datetime
        """
        return self._report_period

    @report_period.setter
    def report_period(self, report_period):
        """Sets the report_period of this Financials.


        :param report_period: The report_period of this Financials.  # noqa: E501
        :type: datetime
        """

        self._report_period = report_period

    @property
    def updated(self):
        """Gets the updated of this Financials.  # noqa: E501


        :return: The updated of this Financials.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Financials.


        :param updated: The updated of this Financials.  # noqa: E501
        :type: datetime
        """

        self._updated = updated

    @property
    def accumulated_other_comprehensive_income(self):
        """Gets the accumulated_other_comprehensive_income of this Financials.  # noqa: E501


        :return: The accumulated_other_comprehensive_income of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._accumulated_other_comprehensive_income

    @accumulated_other_comprehensive_income.setter
    def accumulated_other_comprehensive_income(self, accumulated_other_comprehensive_income):
        """Sets the accumulated_other_comprehensive_income of this Financials.


        :param accumulated_other_comprehensive_income: The accumulated_other_comprehensive_income of this Financials.  # noqa: E501
        :type: int
        """

        self._accumulated_other_comprehensive_income = accumulated_other_comprehensive_income

    @property
    def assets(self):
        """Gets the assets of this Financials.  # noqa: E501


        :return: The assets of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Financials.


        :param assets: The assets of this Financials.  # noqa: E501
        :type: int
        """

        self._assets = assets

    @property
    def assets_average(self):
        """Gets the assets_average of this Financials.  # noqa: E501


        :return: The assets_average of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._assets_average

    @assets_average.setter
    def assets_average(self, assets_average):
        """Sets the assets_average of this Financials.


        :param assets_average: The assets_average of this Financials.  # noqa: E501
        :type: int
        """

        self._assets_average = assets_average

    @property
    def assets_current(self):
        """Gets the assets_current of this Financials.  # noqa: E501


        :return: The assets_current of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._assets_current

    @assets_current.setter
    def assets_current(self, assets_current):
        """Sets the assets_current of this Financials.


        :param assets_current: The assets_current of this Financials.  # noqa: E501
        :type: int
        """

        self._assets_current = assets_current

    @property
    def asset_turnover(self):
        """Gets the asset_turnover of this Financials.  # noqa: E501


        :return: The asset_turnover of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._asset_turnover

    @asset_turnover.setter
    def asset_turnover(self, asset_turnover):
        """Sets the asset_turnover of this Financials.


        :param asset_turnover: The asset_turnover of this Financials.  # noqa: E501
        :type: int
        """

        self._asset_turnover = asset_turnover

    @property
    def assets_non_current(self):
        """Gets the assets_non_current of this Financials.  # noqa: E501


        :return: The assets_non_current of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._assets_non_current

    @assets_non_current.setter
    def assets_non_current(self, assets_non_current):
        """Sets the assets_non_current of this Financials.


        :param assets_non_current: The assets_non_current of this Financials.  # noqa: E501
        :type: int
        """

        self._assets_non_current = assets_non_current

    @property
    def book_value_per_share(self):
        """Gets the book_value_per_share of this Financials.  # noqa: E501


        :return: The book_value_per_share of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._book_value_per_share

    @book_value_per_share.setter
    def book_value_per_share(self, book_value_per_share):
        """Sets the book_value_per_share of this Financials.


        :param book_value_per_share: The book_value_per_share of this Financials.  # noqa: E501
        :type: int
        """

        self._book_value_per_share = book_value_per_share

    @property
    def capital_expenditure(self):
        """Gets the capital_expenditure of this Financials.  # noqa: E501


        :return: The capital_expenditure of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._capital_expenditure

    @capital_expenditure.setter
    def capital_expenditure(self, capital_expenditure):
        """Sets the capital_expenditure of this Financials.


        :param capital_expenditure: The capital_expenditure of this Financials.  # noqa: E501
        :type: int
        """

        self._capital_expenditure = capital_expenditure

    @property
    def cash_and_equivalents(self):
        """Gets the cash_and_equivalents of this Financials.  # noqa: E501


        :return: The cash_and_equivalents of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._cash_and_equivalents

    @cash_and_equivalents.setter
    def cash_and_equivalents(self, cash_and_equivalents):
        """Sets the cash_and_equivalents of this Financials.


        :param cash_and_equivalents: The cash_and_equivalents of this Financials.  # noqa: E501
        :type: int
        """

        self._cash_and_equivalents = cash_and_equivalents

    @property
    def cash_and_equivalents_usd(self):
        """Gets the cash_and_equivalents_usd of this Financials.  # noqa: E501


        :return: The cash_and_equivalents_usd of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._cash_and_equivalents_usd

    @cash_and_equivalents_usd.setter
    def cash_and_equivalents_usd(self, cash_and_equivalents_usd):
        """Sets the cash_and_equivalents_usd of this Financials.


        :param cash_and_equivalents_usd: The cash_and_equivalents_usd of this Financials.  # noqa: E501
        :type: int
        """

        self._cash_and_equivalents_usd = cash_and_equivalents_usd

    @property
    def cost_of_revenue(self):
        """Gets the cost_of_revenue of this Financials.  # noqa: E501


        :return: The cost_of_revenue of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._cost_of_revenue

    @cost_of_revenue.setter
    def cost_of_revenue(self, cost_of_revenue):
        """Sets the cost_of_revenue of this Financials.


        :param cost_of_revenue: The cost_of_revenue of this Financials.  # noqa: E501
        :type: int
        """

        self._cost_of_revenue = cost_of_revenue

    @property
    def consolidated_income(self):
        """Gets the consolidated_income of this Financials.  # noqa: E501


        :return: The consolidated_income of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._consolidated_income

    @consolidated_income.setter
    def consolidated_income(self, consolidated_income):
        """Sets the consolidated_income of this Financials.


        :param consolidated_income: The consolidated_income of this Financials.  # noqa: E501
        :type: int
        """

        self._consolidated_income = consolidated_income

    @property
    def current_ratio(self):
        """Gets the current_ratio of this Financials.  # noqa: E501


        :return: The current_ratio of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._current_ratio

    @current_ratio.setter
    def current_ratio(self, current_ratio):
        """Sets the current_ratio of this Financials.


        :param current_ratio: The current_ratio of this Financials.  # noqa: E501
        :type: int
        """

        self._current_ratio = current_ratio

    @property
    def debt_to_equity_ratio(self):
        """Gets the debt_to_equity_ratio of this Financials.  # noqa: E501


        :return: The debt_to_equity_ratio of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._debt_to_equity_ratio

    @debt_to_equity_ratio.setter
    def debt_to_equity_ratio(self, debt_to_equity_ratio):
        """Sets the debt_to_equity_ratio of this Financials.


        :param debt_to_equity_ratio: The debt_to_equity_ratio of this Financials.  # noqa: E501
        :type: int
        """

        self._debt_to_equity_ratio = debt_to_equity_ratio

    @property
    def debt(self):
        """Gets the debt of this Financials.  # noqa: E501


        :return: The debt of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._debt

    @debt.setter
    def debt(self, debt):
        """Sets the debt of this Financials.


        :param debt: The debt of this Financials.  # noqa: E501
        :type: int
        """

        self._debt = debt

    @property
    def debt_current(self):
        """Gets the debt_current of this Financials.  # noqa: E501


        :return: The debt_current of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._debt_current

    @debt_current.setter
    def debt_current(self, debt_current):
        """Sets the debt_current of this Financials.


        :param debt_current: The debt_current of this Financials.  # noqa: E501
        :type: int
        """

        self._debt_current = debt_current

    @property
    def debt_non_current(self):
        """Gets the debt_non_current of this Financials.  # noqa: E501


        :return: The debt_non_current of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._debt_non_current

    @debt_non_current.setter
    def debt_non_current(self, debt_non_current):
        """Sets the debt_non_current of this Financials.


        :param debt_non_current: The debt_non_current of this Financials.  # noqa: E501
        :type: int
        """

        self._debt_non_current = debt_non_current

    @property
    def debt_usd(self):
        """Gets the debt_usd of this Financials.  # noqa: E501


        :return: The debt_usd of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._debt_usd

    @debt_usd.setter
    def debt_usd(self, debt_usd):
        """Sets the debt_usd of this Financials.


        :param debt_usd: The debt_usd of this Financials.  # noqa: E501
        :type: int
        """

        self._debt_usd = debt_usd

    @property
    def deferred_revenue(self):
        """Gets the deferred_revenue of this Financials.  # noqa: E501


        :return: The deferred_revenue of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._deferred_revenue

    @deferred_revenue.setter
    def deferred_revenue(self, deferred_revenue):
        """Sets the deferred_revenue of this Financials.


        :param deferred_revenue: The deferred_revenue of this Financials.  # noqa: E501
        :type: int
        """

        self._deferred_revenue = deferred_revenue

    @property
    def depreciation_amortization_and_accretion(self):
        """Gets the depreciation_amortization_and_accretion of this Financials.  # noqa: E501


        :return: The depreciation_amortization_and_accretion of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._depreciation_amortization_and_accretion

    @depreciation_amortization_and_accretion.setter
    def depreciation_amortization_and_accretion(self, depreciation_amortization_and_accretion):
        """Sets the depreciation_amortization_and_accretion of this Financials.


        :param depreciation_amortization_and_accretion: The depreciation_amortization_and_accretion of this Financials.  # noqa: E501
        :type: int
        """

        self._depreciation_amortization_and_accretion = depreciation_amortization_and_accretion

    @property
    def deposits(self):
        """Gets the deposits of this Financials.  # noqa: E501


        :return: The deposits of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._deposits

    @deposits.setter
    def deposits(self, deposits):
        """Sets the deposits of this Financials.


        :param deposits: The deposits of this Financials.  # noqa: E501
        :type: int
        """

        self._deposits = deposits

    @property
    def dividend_yield(self):
        """Gets the dividend_yield of this Financials.  # noqa: E501


        :return: The dividend_yield of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._dividend_yield

    @dividend_yield.setter
    def dividend_yield(self, dividend_yield):
        """Sets the dividend_yield of this Financials.


        :param dividend_yield: The dividend_yield of this Financials.  # noqa: E501
        :type: int
        """

        self._dividend_yield = dividend_yield

    @property
    def dividends_per_basic_common_share(self):
        """Gets the dividends_per_basic_common_share of this Financials.  # noqa: E501


        :return: The dividends_per_basic_common_share of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._dividends_per_basic_common_share

    @dividends_per_basic_common_share.setter
    def dividends_per_basic_common_share(self, dividends_per_basic_common_share):
        """Sets the dividends_per_basic_common_share of this Financials.


        :param dividends_per_basic_common_share: The dividends_per_basic_common_share of this Financials.  # noqa: E501
        :type: int
        """

        self._dividends_per_basic_common_share = dividends_per_basic_common_share

    @property
    def earning_before_interest_taxes(self):
        """Gets the earning_before_interest_taxes of this Financials.  # noqa: E501


        :return: The earning_before_interest_taxes of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._earning_before_interest_taxes

    @earning_before_interest_taxes.setter
    def earning_before_interest_taxes(self, earning_before_interest_taxes):
        """Sets the earning_before_interest_taxes of this Financials.


        :param earning_before_interest_taxes: The earning_before_interest_taxes of this Financials.  # noqa: E501
        :type: int
        """

        self._earning_before_interest_taxes = earning_before_interest_taxes

    @property
    def earnings_before_interest_taxes_depreciation_amortization(self):
        """Gets the earnings_before_interest_taxes_depreciation_amortization of this Financials.  # noqa: E501


        :return: The earnings_before_interest_taxes_depreciation_amortization of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._earnings_before_interest_taxes_depreciation_amortization

    @earnings_before_interest_taxes_depreciation_amortization.setter
    def earnings_before_interest_taxes_depreciation_amortization(self, earnings_before_interest_taxes_depreciation_amortization):
        """Sets the earnings_before_interest_taxes_depreciation_amortization of this Financials.


        :param earnings_before_interest_taxes_depreciation_amortization: The earnings_before_interest_taxes_depreciation_amortization of this Financials.  # noqa: E501
        :type: int
        """

        self._earnings_before_interest_taxes_depreciation_amortization = earnings_before_interest_taxes_depreciation_amortization

    @property
    def ebitda_margin(self):
        """Gets the ebitda_margin of this Financials.  # noqa: E501


        :return: The ebitda_margin of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._ebitda_margin

    @ebitda_margin.setter
    def ebitda_margin(self, ebitda_margin):
        """Sets the ebitda_margin of this Financials.


        :param ebitda_margin: The ebitda_margin of this Financials.  # noqa: E501
        :type: int
        """

        self._ebitda_margin = ebitda_margin

    @property
    def earnings_before_interest_taxes_depreciation_amortization_usd(self):
        """Gets the earnings_before_interest_taxes_depreciation_amortization_usd of this Financials.  # noqa: E501


        :return: The earnings_before_interest_taxes_depreciation_amortization_usd of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._earnings_before_interest_taxes_depreciation_amortization_usd

    @earnings_before_interest_taxes_depreciation_amortization_usd.setter
    def earnings_before_interest_taxes_depreciation_amortization_usd(self, earnings_before_interest_taxes_depreciation_amortization_usd):
        """Sets the earnings_before_interest_taxes_depreciation_amortization_usd of this Financials.


        :param earnings_before_interest_taxes_depreciation_amortization_usd: The earnings_before_interest_taxes_depreciation_amortization_usd of this Financials.  # noqa: E501
        :type: int
        """

        self._earnings_before_interest_taxes_depreciation_amortization_usd = earnings_before_interest_taxes_depreciation_amortization_usd

    @property
    def earning_before_interest_taxes_usd(self):
        """Gets the earning_before_interest_taxes_usd of this Financials.  # noqa: E501


        :return: The earning_before_interest_taxes_usd of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._earning_before_interest_taxes_usd

    @earning_before_interest_taxes_usd.setter
    def earning_before_interest_taxes_usd(self, earning_before_interest_taxes_usd):
        """Sets the earning_before_interest_taxes_usd of this Financials.


        :param earning_before_interest_taxes_usd: The earning_before_interest_taxes_usd of this Financials.  # noqa: E501
        :type: int
        """

        self._earning_before_interest_taxes_usd = earning_before_interest_taxes_usd

    @property
    def earnings_before_tax(self):
        """Gets the earnings_before_tax of this Financials.  # noqa: E501


        :return: The earnings_before_tax of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._earnings_before_tax

    @earnings_before_tax.setter
    def earnings_before_tax(self, earnings_before_tax):
        """Sets the earnings_before_tax of this Financials.


        :param earnings_before_tax: The earnings_before_tax of this Financials.  # noqa: E501
        :type: int
        """

        self._earnings_before_tax = earnings_before_tax

    @property
    def earnings_per_basic_share(self):
        """Gets the earnings_per_basic_share of this Financials.  # noqa: E501


        :return: The earnings_per_basic_share of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._earnings_per_basic_share

    @earnings_per_basic_share.setter
    def earnings_per_basic_share(self, earnings_per_basic_share):
        """Sets the earnings_per_basic_share of this Financials.


        :param earnings_per_basic_share: The earnings_per_basic_share of this Financials.  # noqa: E501
        :type: int
        """

        self._earnings_per_basic_share = earnings_per_basic_share

    @property
    def earnings_per_diluted_share(self):
        """Gets the earnings_per_diluted_share of this Financials.  # noqa: E501


        :return: The earnings_per_diluted_share of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._earnings_per_diluted_share

    @earnings_per_diluted_share.setter
    def earnings_per_diluted_share(self, earnings_per_diluted_share):
        """Sets the earnings_per_diluted_share of this Financials.


        :param earnings_per_diluted_share: The earnings_per_diluted_share of this Financials.  # noqa: E501
        :type: int
        """

        self._earnings_per_diluted_share = earnings_per_diluted_share

    @property
    def earnings_per_basic_share_usd(self):
        """Gets the earnings_per_basic_share_usd of this Financials.  # noqa: E501


        :return: The earnings_per_basic_share_usd of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._earnings_per_basic_share_usd

    @earnings_per_basic_share_usd.setter
    def earnings_per_basic_share_usd(self, earnings_per_basic_share_usd):
        """Sets the earnings_per_basic_share_usd of this Financials.


        :param earnings_per_basic_share_usd: The earnings_per_basic_share_usd of this Financials.  # noqa: E501
        :type: int
        """

        self._earnings_per_basic_share_usd = earnings_per_basic_share_usd

    @property
    def shareholders_equity(self):
        """Gets the shareholders_equity of this Financials.  # noqa: E501


        :return: The shareholders_equity of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._shareholders_equity

    @shareholders_equity.setter
    def shareholders_equity(self, shareholders_equity):
        """Sets the shareholders_equity of this Financials.


        :param shareholders_equity: The shareholders_equity of this Financials.  # noqa: E501
        :type: int
        """

        self._shareholders_equity = shareholders_equity

    @property
    def average_equity(self):
        """Gets the average_equity of this Financials.  # noqa: E501


        :return: The average_equity of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._average_equity

    @average_equity.setter
    def average_equity(self, average_equity):
        """Sets the average_equity of this Financials.


        :param average_equity: The average_equity of this Financials.  # noqa: E501
        :type: int
        """

        self._average_equity = average_equity

    @property
    def shareholders_equity_usd(self):
        """Gets the shareholders_equity_usd of this Financials.  # noqa: E501


        :return: The shareholders_equity_usd of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._shareholders_equity_usd

    @shareholders_equity_usd.setter
    def shareholders_equity_usd(self, shareholders_equity_usd):
        """Sets the shareholders_equity_usd of this Financials.


        :param shareholders_equity_usd: The shareholders_equity_usd of this Financials.  # noqa: E501
        :type: int
        """

        self._shareholders_equity_usd = shareholders_equity_usd

    @property
    def enterprise_value(self):
        """Gets the enterprise_value of this Financials.  # noqa: E501


        :return: The enterprise_value of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._enterprise_value

    @enterprise_value.setter
    def enterprise_value(self, enterprise_value):
        """Sets the enterprise_value of this Financials.


        :param enterprise_value: The enterprise_value of this Financials.  # noqa: E501
        :type: int
        """

        self._enterprise_value = enterprise_value

    @property
    def enterprise_value_over_ebit(self):
        """Gets the enterprise_value_over_ebit of this Financials.  # noqa: E501


        :return: The enterprise_value_over_ebit of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._enterprise_value_over_ebit

    @enterprise_value_over_ebit.setter
    def enterprise_value_over_ebit(self, enterprise_value_over_ebit):
        """Sets the enterprise_value_over_ebit of this Financials.


        :param enterprise_value_over_ebit: The enterprise_value_over_ebit of this Financials.  # noqa: E501
        :type: int
        """

        self._enterprise_value_over_ebit = enterprise_value_over_ebit

    @property
    def enterprise_value_over_ebitda(self):
        """Gets the enterprise_value_over_ebitda of this Financials.  # noqa: E501


        :return: The enterprise_value_over_ebitda of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._enterprise_value_over_ebitda

    @enterprise_value_over_ebitda.setter
    def enterprise_value_over_ebitda(self, enterprise_value_over_ebitda):
        """Sets the enterprise_value_over_ebitda of this Financials.


        :param enterprise_value_over_ebitda: The enterprise_value_over_ebitda of this Financials.  # noqa: E501
        :type: int
        """

        self._enterprise_value_over_ebitda = enterprise_value_over_ebitda

    @property
    def free_cash_flow(self):
        """Gets the free_cash_flow of this Financials.  # noqa: E501


        :return: The free_cash_flow of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._free_cash_flow

    @free_cash_flow.setter
    def free_cash_flow(self, free_cash_flow):
        """Sets the free_cash_flow of this Financials.


        :param free_cash_flow: The free_cash_flow of this Financials.  # noqa: E501
        :type: int
        """

        self._free_cash_flow = free_cash_flow

    @property
    def free_cash_flow_per_share(self):
        """Gets the free_cash_flow_per_share of this Financials.  # noqa: E501


        :return: The free_cash_flow_per_share of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._free_cash_flow_per_share

    @free_cash_flow_per_share.setter
    def free_cash_flow_per_share(self, free_cash_flow_per_share):
        """Sets the free_cash_flow_per_share of this Financials.


        :param free_cash_flow_per_share: The free_cash_flow_per_share of this Financials.  # noqa: E501
        :type: int
        """

        self._free_cash_flow_per_share = free_cash_flow_per_share

    @property
    def foreign_currency_usd_exchange_rate(self):
        """Gets the foreign_currency_usd_exchange_rate of this Financials.  # noqa: E501


        :return: The foreign_currency_usd_exchange_rate of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._foreign_currency_usd_exchange_rate

    @foreign_currency_usd_exchange_rate.setter
    def foreign_currency_usd_exchange_rate(self, foreign_currency_usd_exchange_rate):
        """Sets the foreign_currency_usd_exchange_rate of this Financials.


        :param foreign_currency_usd_exchange_rate: The foreign_currency_usd_exchange_rate of this Financials.  # noqa: E501
        :type: int
        """

        self._foreign_currency_usd_exchange_rate = foreign_currency_usd_exchange_rate

    @property
    def gross_profit(self):
        """Gets the gross_profit of this Financials.  # noqa: E501


        :return: The gross_profit of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._gross_profit

    @gross_profit.setter
    def gross_profit(self, gross_profit):
        """Sets the gross_profit of this Financials.


        :param gross_profit: The gross_profit of this Financials.  # noqa: E501
        :type: int
        """

        self._gross_profit = gross_profit

    @property
    def gross_margin(self):
        """Gets the gross_margin of this Financials.  # noqa: E501


        :return: The gross_margin of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._gross_margin

    @gross_margin.setter
    def gross_margin(self, gross_margin):
        """Sets the gross_margin of this Financials.


        :param gross_margin: The gross_margin of this Financials.  # noqa: E501
        :type: int
        """

        self._gross_margin = gross_margin

    @property
    def goodwill_and_intangible_assets(self):
        """Gets the goodwill_and_intangible_assets of this Financials.  # noqa: E501


        :return: The goodwill_and_intangible_assets of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._goodwill_and_intangible_assets

    @goodwill_and_intangible_assets.setter
    def goodwill_and_intangible_assets(self, goodwill_and_intangible_assets):
        """Sets the goodwill_and_intangible_assets of this Financials.


        :param goodwill_and_intangible_assets: The goodwill_and_intangible_assets of this Financials.  # noqa: E501
        :type: int
        """

        self._goodwill_and_intangible_assets = goodwill_and_intangible_assets

    @property
    def interest_expense(self):
        """Gets the interest_expense of this Financials.  # noqa: E501


        :return: The interest_expense of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._interest_expense

    @interest_expense.setter
    def interest_expense(self, interest_expense):
        """Sets the interest_expense of this Financials.


        :param interest_expense: The interest_expense of this Financials.  # noqa: E501
        :type: int
        """

        self._interest_expense = interest_expense

    @property
    def invested_capital(self):
        """Gets the invested_capital of this Financials.  # noqa: E501


        :return: The invested_capital of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._invested_capital

    @invested_capital.setter
    def invested_capital(self, invested_capital):
        """Sets the invested_capital of this Financials.


        :param invested_capital: The invested_capital of this Financials.  # noqa: E501
        :type: int
        """

        self._invested_capital = invested_capital

    @property
    def invested_capital_average(self):
        """Gets the invested_capital_average of this Financials.  # noqa: E501


        :return: The invested_capital_average of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._invested_capital_average

    @invested_capital_average.setter
    def invested_capital_average(self, invested_capital_average):
        """Sets the invested_capital_average of this Financials.


        :param invested_capital_average: The invested_capital_average of this Financials.  # noqa: E501
        :type: int
        """

        self._invested_capital_average = invested_capital_average

    @property
    def inventory(self):
        """Gets the inventory of this Financials.  # noqa: E501


        :return: The inventory of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._inventory

    @inventory.setter
    def inventory(self, inventory):
        """Sets the inventory of this Financials.


        :param inventory: The inventory of this Financials.  # noqa: E501
        :type: int
        """

        self._inventory = inventory

    @property
    def investments(self):
        """Gets the investments of this Financials.  # noqa: E501


        :return: The investments of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._investments

    @investments.setter
    def investments(self, investments):
        """Sets the investments of this Financials.


        :param investments: The investments of this Financials.  # noqa: E501
        :type: int
        """

        self._investments = investments

    @property
    def investments_current(self):
        """Gets the investments_current of this Financials.  # noqa: E501


        :return: The investments_current of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._investments_current

    @investments_current.setter
    def investments_current(self, investments_current):
        """Sets the investments_current of this Financials.


        :param investments_current: The investments_current of this Financials.  # noqa: E501
        :type: int
        """

        self._investments_current = investments_current

    @property
    def investments_non_current(self):
        """Gets the investments_non_current of this Financials.  # noqa: E501


        :return: The investments_non_current of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._investments_non_current

    @investments_non_current.setter
    def investments_non_current(self, investments_non_current):
        """Sets the investments_non_current of this Financials.


        :param investments_non_current: The investments_non_current of this Financials.  # noqa: E501
        :type: int
        """

        self._investments_non_current = investments_non_current

    @property
    def total_liabilities(self):
        """Gets the total_liabilities of this Financials.  # noqa: E501


        :return: The total_liabilities of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._total_liabilities

    @total_liabilities.setter
    def total_liabilities(self, total_liabilities):
        """Sets the total_liabilities of this Financials.


        :param total_liabilities: The total_liabilities of this Financials.  # noqa: E501
        :type: int
        """

        self._total_liabilities = total_liabilities

    @property
    def current_liabilities(self):
        """Gets the current_liabilities of this Financials.  # noqa: E501


        :return: The current_liabilities of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._current_liabilities

    @current_liabilities.setter
    def current_liabilities(self, current_liabilities):
        """Sets the current_liabilities of this Financials.


        :param current_liabilities: The current_liabilities of this Financials.  # noqa: E501
        :type: int
        """

        self._current_liabilities = current_liabilities

    @property
    def liabilities_non_current(self):
        """Gets the liabilities_non_current of this Financials.  # noqa: E501


        :return: The liabilities_non_current of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._liabilities_non_current

    @liabilities_non_current.setter
    def liabilities_non_current(self, liabilities_non_current):
        """Sets the liabilities_non_current of this Financials.


        :param liabilities_non_current: The liabilities_non_current of this Financials.  # noqa: E501
        :type: int
        """

        self._liabilities_non_current = liabilities_non_current

    @property
    def market_capitalization(self):
        """Gets the market_capitalization of this Financials.  # noqa: E501


        :return: The market_capitalization of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._market_capitalization

    @market_capitalization.setter
    def market_capitalization(self, market_capitalization):
        """Sets the market_capitalization of this Financials.


        :param market_capitalization: The market_capitalization of this Financials.  # noqa: E501
        :type: int
        """

        self._market_capitalization = market_capitalization

    @property
    def net_cash_flow(self):
        """Gets the net_cash_flow of this Financials.  # noqa: E501


        :return: The net_cash_flow of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._net_cash_flow

    @net_cash_flow.setter
    def net_cash_flow(self, net_cash_flow):
        """Sets the net_cash_flow of this Financials.


        :param net_cash_flow: The net_cash_flow of this Financials.  # noqa: E501
        :type: int
        """

        self._net_cash_flow = net_cash_flow

    @property
    def net_cash_flow_business_acquisitions_disposals(self):
        """Gets the net_cash_flow_business_acquisitions_disposals of this Financials.  # noqa: E501


        :return: The net_cash_flow_business_acquisitions_disposals of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._net_cash_flow_business_acquisitions_disposals

    @net_cash_flow_business_acquisitions_disposals.setter
    def net_cash_flow_business_acquisitions_disposals(self, net_cash_flow_business_acquisitions_disposals):
        """Sets the net_cash_flow_business_acquisitions_disposals of this Financials.


        :param net_cash_flow_business_acquisitions_disposals: The net_cash_flow_business_acquisitions_disposals of this Financials.  # noqa: E501
        :type: int
        """

        self._net_cash_flow_business_acquisitions_disposals = net_cash_flow_business_acquisitions_disposals

    @property
    def issuance_equity_shares(self):
        """Gets the issuance_equity_shares of this Financials.  # noqa: E501


        :return: The issuance_equity_shares of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._issuance_equity_shares

    @issuance_equity_shares.setter
    def issuance_equity_shares(self, issuance_equity_shares):
        """Sets the issuance_equity_shares of this Financials.


        :param issuance_equity_shares: The issuance_equity_shares of this Financials.  # noqa: E501
        :type: int
        """

        self._issuance_equity_shares = issuance_equity_shares

    @property
    def issuance_debt_securities(self):
        """Gets the issuance_debt_securities of this Financials.  # noqa: E501


        :return: The issuance_debt_securities of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._issuance_debt_securities

    @issuance_debt_securities.setter
    def issuance_debt_securities(self, issuance_debt_securities):
        """Sets the issuance_debt_securities of this Financials.


        :param issuance_debt_securities: The issuance_debt_securities of this Financials.  # noqa: E501
        :type: int
        """

        self._issuance_debt_securities = issuance_debt_securities

    @property
    def payment_dividends_other_cash_distributions(self):
        """Gets the payment_dividends_other_cash_distributions of this Financials.  # noqa: E501


        :return: The payment_dividends_other_cash_distributions of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._payment_dividends_other_cash_distributions

    @payment_dividends_other_cash_distributions.setter
    def payment_dividends_other_cash_distributions(self, payment_dividends_other_cash_distributions):
        """Sets the payment_dividends_other_cash_distributions of this Financials.


        :param payment_dividends_other_cash_distributions: The payment_dividends_other_cash_distributions of this Financials.  # noqa: E501
        :type: int
        """

        self._payment_dividends_other_cash_distributions = payment_dividends_other_cash_distributions

    @property
    def net_cash_flow_from_financing(self):
        """Gets the net_cash_flow_from_financing of this Financials.  # noqa: E501


        :return: The net_cash_flow_from_financing of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._net_cash_flow_from_financing

    @net_cash_flow_from_financing.setter
    def net_cash_flow_from_financing(self, net_cash_flow_from_financing):
        """Sets the net_cash_flow_from_financing of this Financials.


        :param net_cash_flow_from_financing: The net_cash_flow_from_financing of this Financials.  # noqa: E501
        :type: int
        """

        self._net_cash_flow_from_financing = net_cash_flow_from_financing

    @property
    def net_cash_flow_from_investing(self):
        """Gets the net_cash_flow_from_investing of this Financials.  # noqa: E501


        :return: The net_cash_flow_from_investing of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._net_cash_flow_from_investing

    @net_cash_flow_from_investing.setter
    def net_cash_flow_from_investing(self, net_cash_flow_from_investing):
        """Sets the net_cash_flow_from_investing of this Financials.


        :param net_cash_flow_from_investing: The net_cash_flow_from_investing of this Financials.  # noqa: E501
        :type: int
        """

        self._net_cash_flow_from_investing = net_cash_flow_from_investing

    @property
    def net_cash_flow_investment_acquisitions_disposals(self):
        """Gets the net_cash_flow_investment_acquisitions_disposals of this Financials.  # noqa: E501


        :return: The net_cash_flow_investment_acquisitions_disposals of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._net_cash_flow_investment_acquisitions_disposals

    @net_cash_flow_investment_acquisitions_disposals.setter
    def net_cash_flow_investment_acquisitions_disposals(self, net_cash_flow_investment_acquisitions_disposals):
        """Sets the net_cash_flow_investment_acquisitions_disposals of this Financials.


        :param net_cash_flow_investment_acquisitions_disposals: The net_cash_flow_investment_acquisitions_disposals of this Financials.  # noqa: E501
        :type: int
        """

        self._net_cash_flow_investment_acquisitions_disposals = net_cash_flow_investment_acquisitions_disposals

    @property
    def net_cash_flow_from_operations(self):
        """Gets the net_cash_flow_from_operations of this Financials.  # noqa: E501


        :return: The net_cash_flow_from_operations of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._net_cash_flow_from_operations

    @net_cash_flow_from_operations.setter
    def net_cash_flow_from_operations(self, net_cash_flow_from_operations):
        """Sets the net_cash_flow_from_operations of this Financials.


        :param net_cash_flow_from_operations: The net_cash_flow_from_operations of this Financials.  # noqa: E501
        :type: int
        """

        self._net_cash_flow_from_operations = net_cash_flow_from_operations

    @property
    def effect_of_exchange_rate_changes_on_cash(self):
        """Gets the effect_of_exchange_rate_changes_on_cash of this Financials.  # noqa: E501


        :return: The effect_of_exchange_rate_changes_on_cash of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._effect_of_exchange_rate_changes_on_cash

    @effect_of_exchange_rate_changes_on_cash.setter
    def effect_of_exchange_rate_changes_on_cash(self, effect_of_exchange_rate_changes_on_cash):
        """Sets the effect_of_exchange_rate_changes_on_cash of this Financials.


        :param effect_of_exchange_rate_changes_on_cash: The effect_of_exchange_rate_changes_on_cash of this Financials.  # noqa: E501
        :type: int
        """

        self._effect_of_exchange_rate_changes_on_cash = effect_of_exchange_rate_changes_on_cash

    @property
    def net_income(self):
        """Gets the net_income of this Financials.  # noqa: E501


        :return: The net_income of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._net_income

    @net_income.setter
    def net_income(self, net_income):
        """Sets the net_income of this Financials.


        :param net_income: The net_income of this Financials.  # noqa: E501
        :type: int
        """

        self._net_income = net_income

    @property
    def net_income_common_stock(self):
        """Gets the net_income_common_stock of this Financials.  # noqa: E501


        :return: The net_income_common_stock of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._net_income_common_stock

    @net_income_common_stock.setter
    def net_income_common_stock(self, net_income_common_stock):
        """Sets the net_income_common_stock of this Financials.


        :param net_income_common_stock: The net_income_common_stock of this Financials.  # noqa: E501
        :type: int
        """

        self._net_income_common_stock = net_income_common_stock

    @property
    def net_income_common_stock_usd(self):
        """Gets the net_income_common_stock_usd of this Financials.  # noqa: E501


        :return: The net_income_common_stock_usd of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._net_income_common_stock_usd

    @net_income_common_stock_usd.setter
    def net_income_common_stock_usd(self, net_income_common_stock_usd):
        """Sets the net_income_common_stock_usd of this Financials.


        :param net_income_common_stock_usd: The net_income_common_stock_usd of this Financials.  # noqa: E501
        :type: int
        """

        self._net_income_common_stock_usd = net_income_common_stock_usd

    @property
    def net_loss_income_from_discontinued_operations(self):
        """Gets the net_loss_income_from_discontinued_operations of this Financials.  # noqa: E501


        :return: The net_loss_income_from_discontinued_operations of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._net_loss_income_from_discontinued_operations

    @net_loss_income_from_discontinued_operations.setter
    def net_loss_income_from_discontinued_operations(self, net_loss_income_from_discontinued_operations):
        """Sets the net_loss_income_from_discontinued_operations of this Financials.


        :param net_loss_income_from_discontinued_operations: The net_loss_income_from_discontinued_operations of this Financials.  # noqa: E501
        :type: int
        """

        self._net_loss_income_from_discontinued_operations = net_loss_income_from_discontinued_operations

    @property
    def net_income_to_non_controlling_interests(self):
        """Gets the net_income_to_non_controlling_interests of this Financials.  # noqa: E501


        :return: The net_income_to_non_controlling_interests of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._net_income_to_non_controlling_interests

    @net_income_to_non_controlling_interests.setter
    def net_income_to_non_controlling_interests(self, net_income_to_non_controlling_interests):
        """Sets the net_income_to_non_controlling_interests of this Financials.


        :param net_income_to_non_controlling_interests: The net_income_to_non_controlling_interests of this Financials.  # noqa: E501
        :type: int
        """

        self._net_income_to_non_controlling_interests = net_income_to_non_controlling_interests

    @property
    def profit_margin(self):
        """Gets the profit_margin of this Financials.  # noqa: E501


        :return: The profit_margin of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._profit_margin

    @profit_margin.setter
    def profit_margin(self, profit_margin):
        """Sets the profit_margin of this Financials.


        :param profit_margin: The profit_margin of this Financials.  # noqa: E501
        :type: int
        """

        self._profit_margin = profit_margin

    @property
    def operating_expenses(self):
        """Gets the operating_expenses of this Financials.  # noqa: E501


        :return: The operating_expenses of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._operating_expenses

    @operating_expenses.setter
    def operating_expenses(self, operating_expenses):
        """Sets the operating_expenses of this Financials.


        :param operating_expenses: The operating_expenses of this Financials.  # noqa: E501
        :type: int
        """

        self._operating_expenses = operating_expenses

    @property
    def operating_income(self):
        """Gets the operating_income of this Financials.  # noqa: E501


        :return: The operating_income of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._operating_income

    @operating_income.setter
    def operating_income(self, operating_income):
        """Sets the operating_income of this Financials.


        :param operating_income: The operating_income of this Financials.  # noqa: E501
        :type: int
        """

        self._operating_income = operating_income

    @property
    def trade_and_non_trade_payables(self):
        """Gets the trade_and_non_trade_payables of this Financials.  # noqa: E501


        :return: The trade_and_non_trade_payables of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._trade_and_non_trade_payables

    @trade_and_non_trade_payables.setter
    def trade_and_non_trade_payables(self, trade_and_non_trade_payables):
        """Sets the trade_and_non_trade_payables of this Financials.


        :param trade_and_non_trade_payables: The trade_and_non_trade_payables of this Financials.  # noqa: E501
        :type: int
        """

        self._trade_and_non_trade_payables = trade_and_non_trade_payables

    @property
    def payout_ratio(self):
        """Gets the payout_ratio of this Financials.  # noqa: E501


        :return: The payout_ratio of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._payout_ratio

    @payout_ratio.setter
    def payout_ratio(self, payout_ratio):
        """Sets the payout_ratio of this Financials.


        :param payout_ratio: The payout_ratio of this Financials.  # noqa: E501
        :type: int
        """

        self._payout_ratio = payout_ratio

    @property
    def price_to_book_value(self):
        """Gets the price_to_book_value of this Financials.  # noqa: E501


        :return: The price_to_book_value of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._price_to_book_value

    @price_to_book_value.setter
    def price_to_book_value(self, price_to_book_value):
        """Sets the price_to_book_value of this Financials.


        :param price_to_book_value: The price_to_book_value of this Financials.  # noqa: E501
        :type: int
        """

        self._price_to_book_value = price_to_book_value

    @property
    def price_earnings(self):
        """Gets the price_earnings of this Financials.  # noqa: E501


        :return: The price_earnings of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._price_earnings

    @price_earnings.setter
    def price_earnings(self, price_earnings):
        """Sets the price_earnings of this Financials.


        :param price_earnings: The price_earnings of this Financials.  # noqa: E501
        :type: int
        """

        self._price_earnings = price_earnings

    @property
    def price_to_earnings_ratio(self):
        """Gets the price_to_earnings_ratio of this Financials.  # noqa: E501


        :return: The price_to_earnings_ratio of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._price_to_earnings_ratio

    @price_to_earnings_ratio.setter
    def price_to_earnings_ratio(self, price_to_earnings_ratio):
        """Sets the price_to_earnings_ratio of this Financials.


        :param price_to_earnings_ratio: The price_to_earnings_ratio of this Financials.  # noqa: E501
        :type: int
        """

        self._price_to_earnings_ratio = price_to_earnings_ratio

    @property
    def property_plant_equipment_net(self):
        """Gets the property_plant_equipment_net of this Financials.  # noqa: E501


        :return: The property_plant_equipment_net of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._property_plant_equipment_net

    @property_plant_equipment_net.setter
    def property_plant_equipment_net(self, property_plant_equipment_net):
        """Sets the property_plant_equipment_net of this Financials.


        :param property_plant_equipment_net: The property_plant_equipment_net of this Financials.  # noqa: E501
        :type: int
        """

        self._property_plant_equipment_net = property_plant_equipment_net

    @property
    def preferred_dividends_income_statement_impact(self):
        """Gets the preferred_dividends_income_statement_impact of this Financials.  # noqa: E501


        :return: The preferred_dividends_income_statement_impact of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._preferred_dividends_income_statement_impact

    @preferred_dividends_income_statement_impact.setter
    def preferred_dividends_income_statement_impact(self, preferred_dividends_income_statement_impact):
        """Sets the preferred_dividends_income_statement_impact of this Financials.


        :param preferred_dividends_income_statement_impact: The preferred_dividends_income_statement_impact of this Financials.  # noqa: E501
        :type: int
        """

        self._preferred_dividends_income_statement_impact = preferred_dividends_income_statement_impact

    @property
    def share_price_adjusted_close(self):
        """Gets the share_price_adjusted_close of this Financials.  # noqa: E501


        :return: The share_price_adjusted_close of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._share_price_adjusted_close

    @share_price_adjusted_close.setter
    def share_price_adjusted_close(self, share_price_adjusted_close):
        """Sets the share_price_adjusted_close of this Financials.


        :param share_price_adjusted_close: The share_price_adjusted_close of this Financials.  # noqa: E501
        :type: int
        """

        self._share_price_adjusted_close = share_price_adjusted_close

    @property
    def price_sales(self):
        """Gets the price_sales of this Financials.  # noqa: E501


        :return: The price_sales of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._price_sales

    @price_sales.setter
    def price_sales(self, price_sales):
        """Sets the price_sales of this Financials.


        :param price_sales: The price_sales of this Financials.  # noqa: E501
        :type: int
        """

        self._price_sales = price_sales

    @property
    def price_to_sales_ratio(self):
        """Gets the price_to_sales_ratio of this Financials.  # noqa: E501


        :return: The price_to_sales_ratio of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._price_to_sales_ratio

    @price_to_sales_ratio.setter
    def price_to_sales_ratio(self, price_to_sales_ratio):
        """Sets the price_to_sales_ratio of this Financials.


        :param price_to_sales_ratio: The price_to_sales_ratio of this Financials.  # noqa: E501
        :type: int
        """

        self._price_to_sales_ratio = price_to_sales_ratio

    @property
    def trade_and_non_trade_receivables(self):
        """Gets the trade_and_non_trade_receivables of this Financials.  # noqa: E501


        :return: The trade_and_non_trade_receivables of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._trade_and_non_trade_receivables

    @trade_and_non_trade_receivables.setter
    def trade_and_non_trade_receivables(self, trade_and_non_trade_receivables):
        """Sets the trade_and_non_trade_receivables of this Financials.


        :param trade_and_non_trade_receivables: The trade_and_non_trade_receivables of this Financials.  # noqa: E501
        :type: int
        """

        self._trade_and_non_trade_receivables = trade_and_non_trade_receivables

    @property
    def accumulated_retained_earnings_deficit(self):
        """Gets the accumulated_retained_earnings_deficit of this Financials.  # noqa: E501


        :return: The accumulated_retained_earnings_deficit of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._accumulated_retained_earnings_deficit

    @accumulated_retained_earnings_deficit.setter
    def accumulated_retained_earnings_deficit(self, accumulated_retained_earnings_deficit):
        """Sets the accumulated_retained_earnings_deficit of this Financials.


        :param accumulated_retained_earnings_deficit: The accumulated_retained_earnings_deficit of this Financials.  # noqa: E501
        :type: int
        """

        self._accumulated_retained_earnings_deficit = accumulated_retained_earnings_deficit

    @property
    def revenues(self):
        """Gets the revenues of this Financials.  # noqa: E501


        :return: The revenues of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._revenues

    @revenues.setter
    def revenues(self, revenues):
        """Sets the revenues of this Financials.


        :param revenues: The revenues of this Financials.  # noqa: E501
        :type: int
        """

        self._revenues = revenues

    @property
    def revenues_usd(self):
        """Gets the revenues_usd of this Financials.  # noqa: E501


        :return: The revenues_usd of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._revenues_usd

    @revenues_usd.setter
    def revenues_usd(self, revenues_usd):
        """Sets the revenues_usd of this Financials.


        :param revenues_usd: The revenues_usd of this Financials.  # noqa: E501
        :type: int
        """

        self._revenues_usd = revenues_usd

    @property
    def research_and_development_expense(self):
        """Gets the research_and_development_expense of this Financials.  # noqa: E501


        :return: The research_and_development_expense of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._research_and_development_expense

    @research_and_development_expense.setter
    def research_and_development_expense(self, research_and_development_expense):
        """Sets the research_and_development_expense of this Financials.


        :param research_and_development_expense: The research_and_development_expense of this Financials.  # noqa: E501
        :type: int
        """

        self._research_and_development_expense = research_and_development_expense

    @property
    def return_on_average_assets(self):
        """Gets the return_on_average_assets of this Financials.  # noqa: E501


        :return: The return_on_average_assets of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._return_on_average_assets

    @return_on_average_assets.setter
    def return_on_average_assets(self, return_on_average_assets):
        """Sets the return_on_average_assets of this Financials.


        :param return_on_average_assets: The return_on_average_assets of this Financials.  # noqa: E501
        :type: int
        """

        self._return_on_average_assets = return_on_average_assets

    @property
    def return_on_average_equity(self):
        """Gets the return_on_average_equity of this Financials.  # noqa: E501


        :return: The return_on_average_equity of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._return_on_average_equity

    @return_on_average_equity.setter
    def return_on_average_equity(self, return_on_average_equity):
        """Sets the return_on_average_equity of this Financials.


        :param return_on_average_equity: The return_on_average_equity of this Financials.  # noqa: E501
        :type: int
        """

        self._return_on_average_equity = return_on_average_equity

    @property
    def return_on_invested_capital(self):
        """Gets the return_on_invested_capital of this Financials.  # noqa: E501


        :return: The return_on_invested_capital of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._return_on_invested_capital

    @return_on_invested_capital.setter
    def return_on_invested_capital(self, return_on_invested_capital):
        """Sets the return_on_invested_capital of this Financials.


        :param return_on_invested_capital: The return_on_invested_capital of this Financials.  # noqa: E501
        :type: int
        """

        self._return_on_invested_capital = return_on_invested_capital

    @property
    def return_on_sales(self):
        """Gets the return_on_sales of this Financials.  # noqa: E501


        :return: The return_on_sales of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._return_on_sales

    @return_on_sales.setter
    def return_on_sales(self, return_on_sales):
        """Sets the return_on_sales of this Financials.


        :param return_on_sales: The return_on_sales of this Financials.  # noqa: E501
        :type: int
        """

        self._return_on_sales = return_on_sales

    @property
    def share_based_compensation(self):
        """Gets the share_based_compensation of this Financials.  # noqa: E501


        :return: The share_based_compensation of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._share_based_compensation

    @share_based_compensation.setter
    def share_based_compensation(self, share_based_compensation):
        """Sets the share_based_compensation of this Financials.


        :param share_based_compensation: The share_based_compensation of this Financials.  # noqa: E501
        :type: int
        """

        self._share_based_compensation = share_based_compensation

    @property
    def selling_general_and_administrative_expense(self):
        """Gets the selling_general_and_administrative_expense of this Financials.  # noqa: E501


        :return: The selling_general_and_administrative_expense of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._selling_general_and_administrative_expense

    @selling_general_and_administrative_expense.setter
    def selling_general_and_administrative_expense(self, selling_general_and_administrative_expense):
        """Sets the selling_general_and_administrative_expense of this Financials.


        :param selling_general_and_administrative_expense: The selling_general_and_administrative_expense of this Financials.  # noqa: E501
        :type: int
        """

        self._selling_general_and_administrative_expense = selling_general_and_administrative_expense

    @property
    def share_factor(self):
        """Gets the share_factor of this Financials.  # noqa: E501


        :return: The share_factor of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._share_factor

    @share_factor.setter
    def share_factor(self, share_factor):
        """Sets the share_factor of this Financials.


        :param share_factor: The share_factor of this Financials.  # noqa: E501
        :type: int
        """

        self._share_factor = share_factor

    @property
    def shares(self):
        """Gets the shares of this Financials.  # noqa: E501


        :return: The shares of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this Financials.


        :param shares: The shares of this Financials.  # noqa: E501
        :type: int
        """

        self._shares = shares

    @property
    def weighted_average_shares(self):
        """Gets the weighted_average_shares of this Financials.  # noqa: E501


        :return: The weighted_average_shares of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._weighted_average_shares

    @weighted_average_shares.setter
    def weighted_average_shares(self, weighted_average_shares):
        """Sets the weighted_average_shares of this Financials.


        :param weighted_average_shares: The weighted_average_shares of this Financials.  # noqa: E501
        :type: int
        """

        self._weighted_average_shares = weighted_average_shares

    @property
    def weighted_average_shares_diluted(self):
        """Gets the weighted_average_shares_diluted of this Financials.  # noqa: E501


        :return: The weighted_average_shares_diluted of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._weighted_average_shares_diluted

    @weighted_average_shares_diluted.setter
    def weighted_average_shares_diluted(self, weighted_average_shares_diluted):
        """Sets the weighted_average_shares_diluted of this Financials.


        :param weighted_average_shares_diluted: The weighted_average_shares_diluted of this Financials.  # noqa: E501
        :type: int
        """

        self._weighted_average_shares_diluted = weighted_average_shares_diluted

    @property
    def sales_per_share(self):
        """Gets the sales_per_share of this Financials.  # noqa: E501


        :return: The sales_per_share of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._sales_per_share

    @sales_per_share.setter
    def sales_per_share(self, sales_per_share):
        """Sets the sales_per_share of this Financials.


        :param sales_per_share: The sales_per_share of this Financials.  # noqa: E501
        :type: int
        """

        self._sales_per_share = sales_per_share

    @property
    def tangible_asset_value(self):
        """Gets the tangible_asset_value of this Financials.  # noqa: E501


        :return: The tangible_asset_value of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._tangible_asset_value

    @tangible_asset_value.setter
    def tangible_asset_value(self, tangible_asset_value):
        """Sets the tangible_asset_value of this Financials.


        :param tangible_asset_value: The tangible_asset_value of this Financials.  # noqa: E501
        :type: int
        """

        self._tangible_asset_value = tangible_asset_value

    @property
    def tax_assets(self):
        """Gets the tax_assets of this Financials.  # noqa: E501


        :return: The tax_assets of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._tax_assets

    @tax_assets.setter
    def tax_assets(self, tax_assets):
        """Sets the tax_assets of this Financials.


        :param tax_assets: The tax_assets of this Financials.  # noqa: E501
        :type: int
        """

        self._tax_assets = tax_assets

    @property
    def income_tax_expense(self):
        """Gets the income_tax_expense of this Financials.  # noqa: E501


        :return: The income_tax_expense of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._income_tax_expense

    @income_tax_expense.setter
    def income_tax_expense(self, income_tax_expense):
        """Sets the income_tax_expense of this Financials.


        :param income_tax_expense: The income_tax_expense of this Financials.  # noqa: E501
        :type: int
        """

        self._income_tax_expense = income_tax_expense

    @property
    def tax_liabilities(self):
        """Gets the tax_liabilities of this Financials.  # noqa: E501


        :return: The tax_liabilities of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._tax_liabilities

    @tax_liabilities.setter
    def tax_liabilities(self, tax_liabilities):
        """Sets the tax_liabilities of this Financials.


        :param tax_liabilities: The tax_liabilities of this Financials.  # noqa: E501
        :type: int
        """

        self._tax_liabilities = tax_liabilities

    @property
    def tangible_assets_book_value_per_share(self):
        """Gets the tangible_assets_book_value_per_share of this Financials.  # noqa: E501


        :return: The tangible_assets_book_value_per_share of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._tangible_assets_book_value_per_share

    @tangible_assets_book_value_per_share.setter
    def tangible_assets_book_value_per_share(self, tangible_assets_book_value_per_share):
        """Sets the tangible_assets_book_value_per_share of this Financials.


        :param tangible_assets_book_value_per_share: The tangible_assets_book_value_per_share of this Financials.  # noqa: E501
        :type: int
        """

        self._tangible_assets_book_value_per_share = tangible_assets_book_value_per_share

    @property
    def working_capital(self):
        """Gets the working_capital of this Financials.  # noqa: E501


        :return: The working_capital of this Financials.  # noqa: E501
        :rtype: int
        """
        return self._working_capital

    @working_capital.setter
    def working_capital(self, working_capital):
        """Sets the working_capital of this Financials.


        :param working_capital: The working_capital of this Financials.  # noqa: E501
        :type: int
        """

        self._working_capital = working_capital

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Financials, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Financials):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
