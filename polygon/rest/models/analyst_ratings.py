# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class AnalystRatings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'analysts': 'float',
        'change': 'float',
        'strong_buy': 'object',
        'buy': 'object',
        'hold': 'object',
        'sell': 'object',
        'strong_sell': 'object',
        'updated': 'datetime'
    }

    attribute_map = {
        'symbol': 'symbol',
        'analysts': 'analysts',
        'change': 'change',
        'strong_buy': 'strongBuy',
        'buy': 'buy',
        'hold': 'hold',
        'sell': 'sell',
        'strong_sell': 'strongSell',
        'updated': 'updated'
    }

    def __init__(self, symbol=None, analysts=None, change=None, strong_buy=None, buy=None, hold=None, sell=None, strong_sell=None, updated=None):  # noqa: E501
        """AnalystRatings - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._analysts = None
        self._change = None
        self._strong_buy = None
        self._buy = None
        self._hold = None
        self._sell = None
        self._strong_sell = None
        self._updated = None
        self.discriminator = None
        self.symbol = symbol
        self.analysts = analysts
        self.change = change
        self.strong_buy = strong_buy
        self.buy = buy
        self.hold = hold
        self.sell = sell
        self.strong_sell = strong_sell
        self.updated = updated

    @property
    def symbol(self):
        """Gets the symbol of this AnalystRatings.  # noqa: E501

        Symbol which we are requesting ratings  # noqa: E501

        :return: The symbol of this AnalystRatings.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this AnalystRatings.

        Symbol which we are requesting ratings  # noqa: E501

        :param symbol: The symbol of this AnalystRatings.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def analysts(self):
        """Gets the analysts of this AnalystRatings.  # noqa: E501

        Number of analysts reporting  # noqa: E501

        :return: The analysts of this AnalystRatings.  # noqa: E501
        :rtype: float
        """
        return self._analysts

    @analysts.setter
    def analysts(self, analysts):
        """Sets the analysts of this AnalystRatings.

        Number of analysts reporting  # noqa: E501

        :param analysts: The analysts of this AnalystRatings.  # noqa: E501
        :type: float
        """
        if analysts is None:
            raise ValueError("Invalid value for `analysts`, must not be `None`")  # noqa: E501

        self._analysts = analysts

    @property
    def change(self):
        """Gets the change of this AnalystRatings.  # noqa: E501

        Change from last month to current  # noqa: E501

        :return: The change of this AnalystRatings.  # noqa: E501
        :rtype: float
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this AnalystRatings.

        Change from last month to current  # noqa: E501

        :param change: The change of this AnalystRatings.  # noqa: E501
        :type: float
        """
        if change is None:
            raise ValueError("Invalid value for `change`, must not be `None`")  # noqa: E501

        self._change = change

    @property
    def strong_buy(self):
        """Gets the strong_buy of this AnalystRatings.  # noqa: E501

        Strong buy ratings  # noqa: E501

        :return: The strong_buy of this AnalystRatings.  # noqa: E501
        :rtype: object
        """
        return self._strong_buy

    @strong_buy.setter
    def strong_buy(self, strong_buy):
        """Sets the strong_buy of this AnalystRatings.

        Strong buy ratings  # noqa: E501

        :param strong_buy: The strong_buy of this AnalystRatings.  # noqa: E501
        :type: object
        """
        if strong_buy is None:
            raise ValueError("Invalid value for `strong_buy`, must not be `None`")  # noqa: E501

        self._strong_buy = strong_buy

    @property
    def buy(self):
        """Gets the buy of this AnalystRatings.  # noqa: E501

        Moderate buy ratings  # noqa: E501

        :return: The buy of this AnalystRatings.  # noqa: E501
        :rtype: object
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this AnalystRatings.

        Moderate buy ratings  # noqa: E501

        :param buy: The buy of this AnalystRatings.  # noqa: E501
        :type: object
        """
        if buy is None:
            raise ValueError("Invalid value for `buy`, must not be `None`")  # noqa: E501

        self._buy = buy

    @property
    def hold(self):
        """Gets the hold of this AnalystRatings.  # noqa: E501

        Hold ratings  # noqa: E501

        :return: The hold of this AnalystRatings.  # noqa: E501
        :rtype: object
        """
        return self._hold

    @hold.setter
    def hold(self, hold):
        """Sets the hold of this AnalystRatings.

        Hold ratings  # noqa: E501

        :param hold: The hold of this AnalystRatings.  # noqa: E501
        :type: object
        """
        if hold is None:
            raise ValueError("Invalid value for `hold`, must not be `None`")  # noqa: E501

        self._hold = hold

    @property
    def sell(self):
        """Gets the sell of this AnalystRatings.  # noqa: E501

        Moderate Sell ratings  # noqa: E501

        :return: The sell of this AnalystRatings.  # noqa: E501
        :rtype: object
        """
        return self._sell

    @sell.setter
    def sell(self, sell):
        """Sets the sell of this AnalystRatings.

        Moderate Sell ratings  # noqa: E501

        :param sell: The sell of this AnalystRatings.  # noqa: E501
        :type: object
        """
        if sell is None:
            raise ValueError("Invalid value for `sell`, must not be `None`")  # noqa: E501

        self._sell = sell

    @property
    def strong_sell(self):
        """Gets the strong_sell of this AnalystRatings.  # noqa: E501

        Strong Sell ratings  # noqa: E501

        :return: The strong_sell of this AnalystRatings.  # noqa: E501
        :rtype: object
        """
        return self._strong_sell

    @strong_sell.setter
    def strong_sell(self, strong_sell):
        """Sets the strong_sell of this AnalystRatings.

        Strong Sell ratings  # noqa: E501

        :param strong_sell: The strong_sell of this AnalystRatings.  # noqa: E501
        :type: object
        """
        if strong_sell is None:
            raise ValueError("Invalid value for `strong_sell`, must not be `None`")  # noqa: E501

        self._strong_sell = strong_sell

    @property
    def updated(self):
        """Gets the updated of this AnalystRatings.  # noqa: E501

        Last time the ratings for this symbol were updated.  # noqa: E501

        :return: The updated of this AnalystRatings.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this AnalystRatings.

        Last time the ratings for this symbol were updated.  # noqa: E501

        :param updated: The updated of this AnalystRatings.  # noqa: E501
        :type: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalystRatings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalystRatings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
