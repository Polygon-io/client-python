# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ForexSnapshotTicker(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticker': 'str',
        'day': 'ForexSnapshotAgg',
        'last_trade': 'Forex',
        'min': 'ForexSnapshotAgg',
        'prev_day': 'ForexSnapshotAgg',
        'todays_change': 'int',
        'todays_change_perc': 'int',
        'updated': 'int'
    }

    attribute_map = {
        'ticker': 'ticker',
        'day': 'day',
        'last_trade': 'lastTrade',
        'min': 'min',
        'prev_day': 'prevDay',
        'todays_change': 'todaysChange',
        'todays_change_perc': 'todaysChangePerc',
        'updated': 'updated'
    }

    def __init__(self, ticker=None, day=None, last_trade=None, min=None, prev_day=None, todays_change=None, todays_change_perc=None, updated=None):  # noqa: E501
        """ForexSnapshotTicker - a model defined in Swagger"""  # noqa: E501
        self._ticker = None
        self._day = None
        self._last_trade = None
        self._min = None
        self._prev_day = None
        self._todays_change = None
        self._todays_change_perc = None
        self._updated = None
        self.discriminator = None
        self.ticker = ticker
        self.day = day
        self.last_trade = last_trade
        self.min = min
        self.prev_day = prev_day
        self.todays_change = todays_change
        self.todays_change_perc = todays_change_perc
        self.updated = updated

    @property
    def ticker(self):
        """Gets the ticker of this ForexSnapshotTicker.  # noqa: E501

        Ticker of the object  # noqa: E501

        :return: The ticker of this ForexSnapshotTicker.  # noqa: E501
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this ForexSnapshotTicker.

        Ticker of the object  # noqa: E501

        :param ticker: The ticker of this ForexSnapshotTicker.  # noqa: E501
        :type: str
        """
        if ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")  # noqa: E501

        self._ticker = ticker

    @property
    def day(self):
        """Gets the day of this ForexSnapshotTicker.  # noqa: E501


        :return: The day of this ForexSnapshotTicker.  # noqa: E501
        :rtype: ForexSnapshotAgg
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this ForexSnapshotTicker.


        :param day: The day of this ForexSnapshotTicker.  # noqa: E501
        :type: ForexSnapshotAgg
        """
        if day is None:
            raise ValueError("Invalid value for `day`, must not be `None`")  # noqa: E501

        self._day = day

    @property
    def last_trade(self):
        """Gets the last_trade of this ForexSnapshotTicker.  # noqa: E501


        :return: The last_trade of this ForexSnapshotTicker.  # noqa: E501
        :rtype: Forex
        """
        return self._last_trade

    @last_trade.setter
    def last_trade(self, last_trade):
        """Sets the last_trade of this ForexSnapshotTicker.


        :param last_trade: The last_trade of this ForexSnapshotTicker.  # noqa: E501
        :type: Forex
        """
        if last_trade is None:
            raise ValueError("Invalid value for `last_trade`, must not be `None`")  # noqa: E501

        self._last_trade = last_trade

    @property
    def min(self):
        """Gets the min of this ForexSnapshotTicker.  # noqa: E501


        :return: The min of this ForexSnapshotTicker.  # noqa: E501
        :rtype: ForexSnapshotAgg
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this ForexSnapshotTicker.


        :param min: The min of this ForexSnapshotTicker.  # noqa: E501
        :type: ForexSnapshotAgg
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")  # noqa: E501

        self._min = min

    @property
    def prev_day(self):
        """Gets the prev_day of this ForexSnapshotTicker.  # noqa: E501


        :return: The prev_day of this ForexSnapshotTicker.  # noqa: E501
        :rtype: ForexSnapshotAgg
        """
        return self._prev_day

    @prev_day.setter
    def prev_day(self, prev_day):
        """Sets the prev_day of this ForexSnapshotTicker.


        :param prev_day: The prev_day of this ForexSnapshotTicker.  # noqa: E501
        :type: ForexSnapshotAgg
        """
        if prev_day is None:
            raise ValueError("Invalid value for `prev_day`, must not be `None`")  # noqa: E501

        self._prev_day = prev_day

    @property
    def todays_change(self):
        """Gets the todays_change of this ForexSnapshotTicker.  # noqa: E501

        Value of the change from previous day  # noqa: E501

        :return: The todays_change of this ForexSnapshotTicker.  # noqa: E501
        :rtype: int
        """
        return self._todays_change

    @todays_change.setter
    def todays_change(self, todays_change):
        """Sets the todays_change of this ForexSnapshotTicker.

        Value of the change from previous day  # noqa: E501

        :param todays_change: The todays_change of this ForexSnapshotTicker.  # noqa: E501
        :type: int
        """
        if todays_change is None:
            raise ValueError("Invalid value for `todays_change`, must not be `None`")  # noqa: E501

        self._todays_change = todays_change

    @property
    def todays_change_perc(self):
        """Gets the todays_change_perc of this ForexSnapshotTicker.  # noqa: E501

        Percentage change since previous day  # noqa: E501

        :return: The todays_change_perc of this ForexSnapshotTicker.  # noqa: E501
        :rtype: int
        """
        return self._todays_change_perc

    @todays_change_perc.setter
    def todays_change_perc(self, todays_change_perc):
        """Sets the todays_change_perc of this ForexSnapshotTicker.

        Percentage change since previous day  # noqa: E501

        :param todays_change_perc: The todays_change_perc of this ForexSnapshotTicker.  # noqa: E501
        :type: int
        """
        if todays_change_perc is None:
            raise ValueError("Invalid value for `todays_change_perc`, must not be `None`")  # noqa: E501

        self._todays_change_perc = todays_change_perc

    @property
    def updated(self):
        """Gets the updated of this ForexSnapshotTicker.  # noqa: E501

        Last Updated timestamp  # noqa: E501

        :return: The updated of this ForexSnapshotTicker.  # noqa: E501
        :rtype: int
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this ForexSnapshotTicker.

        Last Updated timestamp  # noqa: E501

        :param updated: The updated of this ForexSnapshotTicker.  # noqa: E501
        :type: int
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ForexSnapshotTicker, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ForexSnapshotTicker):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
