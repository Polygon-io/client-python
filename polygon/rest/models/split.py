# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Split(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ticker': 'TickerSymbol',
        'ex_date': 'datetime',
        'payment_date': 'datetime',
        'record_date': 'datetime',
        'declared_date': 'datetime',
        'ratio': 'float',
        'tofactor': 'float',
        'forfactor': 'float'
    }

    attribute_map = {
        'ticker': 'ticker',
        'ex_date': 'exDate',
        'payment_date': 'paymentDate',
        'record_date': 'recordDate',
        'declared_date': 'declaredDate',
        'ratio': 'ratio',
        'tofactor': 'tofactor',
        'forfactor': 'forfactor'
    }

    def __init__(self, ticker=None, ex_date=None, payment_date=None, record_date=None, declared_date=None, ratio=None, tofactor=None, forfactor=None):  # noqa: E501
        """Split - a model defined in Swagger"""  # noqa: E501
        self._ticker = None
        self._ex_date = None
        self._payment_date = None
        self._record_date = None
        self._declared_date = None
        self._ratio = None
        self._tofactor = None
        self._forfactor = None
        self.discriminator = None
        self.ticker = ticker
        self.ex_date = ex_date
        self.payment_date = payment_date
        if record_date is not None:
            self.record_date = record_date
        if declared_date is not None:
            self.declared_date = declared_date
        self.ratio = ratio
        self.tofactor = tofactor
        self.forfactor = forfactor

    @property
    def ticker(self):
        """Gets the ticker of this Split.  # noqa: E501


        :return: The ticker of this Split.  # noqa: E501
        :rtype: TickerSymbol
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker):
        """Sets the ticker of this Split.


        :param ticker: The ticker of this Split.  # noqa: E501
        :type: TickerSymbol
        """
        if ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")  # noqa: E501

        self._ticker = ticker

    @property
    def ex_date(self):
        """Gets the ex_date of this Split.  # noqa: E501

        Execution date of the split  # noqa: E501

        :return: The ex_date of this Split.  # noqa: E501
        :rtype: datetime
        """
        return self._ex_date

    @ex_date.setter
    def ex_date(self, ex_date):
        """Sets the ex_date of this Split.

        Execution date of the split  # noqa: E501

        :param ex_date: The ex_date of this Split.  # noqa: E501
        :type: datetime
        """
        if ex_date is None:
            raise ValueError("Invalid value for `ex_date`, must not be `None`")  # noqa: E501

        self._ex_date = ex_date

    @property
    def payment_date(self):
        """Gets the payment_date of this Split.  # noqa: E501

        Payment date of the split  # noqa: E501

        :return: The payment_date of this Split.  # noqa: E501
        :rtype: datetime
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """Sets the payment_date of this Split.

        Payment date of the split  # noqa: E501

        :param payment_date: The payment_date of this Split.  # noqa: E501
        :type: datetime
        """
        if payment_date is None:
            raise ValueError("Invalid value for `payment_date`, must not be `None`")  # noqa: E501

        self._payment_date = payment_date

    @property
    def record_date(self):
        """Gets the record_date of this Split.  # noqa: E501

        Payment date of the split  # noqa: E501

        :return: The record_date of this Split.  # noqa: E501
        :rtype: datetime
        """
        return self._record_date

    @record_date.setter
    def record_date(self, record_date):
        """Sets the record_date of this Split.

        Payment date of the split  # noqa: E501

        :param record_date: The record_date of this Split.  # noqa: E501
        :type: datetime
        """

        self._record_date = record_date

    @property
    def declared_date(self):
        """Gets the declared_date of this Split.  # noqa: E501

        Payment date of the split  # noqa: E501

        :return: The declared_date of this Split.  # noqa: E501
        :rtype: datetime
        """
        return self._declared_date

    @declared_date.setter
    def declared_date(self, declared_date):
        """Sets the declared_date of this Split.

        Payment date of the split  # noqa: E501

        :param declared_date: The declared_date of this Split.  # noqa: E501
        :type: datetime
        """

        self._declared_date = declared_date

    @property
    def ratio(self):
        """Gets the ratio of this Split.  # noqa: E501

        refers to the split ratio. The split ratio is an inverse of the number of shares that a holder of the stock would have after the split divided by the number of shares that the holder had before. <br/> For example: Split ratio of .5 = 2 for 1 split.   # noqa: E501

        :return: The ratio of this Split.  # noqa: E501
        :rtype: float
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this Split.

        refers to the split ratio. The split ratio is an inverse of the number of shares that a holder of the stock would have after the split divided by the number of shares that the holder had before. <br/> For example: Split ratio of .5 = 2 for 1 split.   # noqa: E501

        :param ratio: The ratio of this Split.  # noqa: E501
        :type: float
        """
        if ratio is None:
            raise ValueError("Invalid value for `ratio`, must not be `None`")  # noqa: E501

        self._ratio = ratio

    @property
    def tofactor(self):
        """Gets the tofactor of this Split.  # noqa: E501

        To factor of the split. Used to calculate the split ratio forfactor/tofactor = ratio (eg ½ = 0.5)   # noqa: E501

        :return: The tofactor of this Split.  # noqa: E501
        :rtype: float
        """
        return self._tofactor

    @tofactor.setter
    def tofactor(self, tofactor):
        """Sets the tofactor of this Split.

        To factor of the split. Used to calculate the split ratio forfactor/tofactor = ratio (eg ½ = 0.5)   # noqa: E501

        :param tofactor: The tofactor of this Split.  # noqa: E501
        :type: float
        """
        if tofactor is None:
            raise ValueError("Invalid value for `tofactor`, must not be `None`")  # noqa: E501

        self._tofactor = tofactor

    @property
    def forfactor(self):
        """Gets the forfactor of this Split.  # noqa: E501

        For factor of the split. Used to calculate the split ratio forfactor/tofactor = ratio (eg ½ = 0.5)   # noqa: E501

        :return: The forfactor of this Split.  # noqa: E501
        :rtype: float
        """
        return self._forfactor

    @forfactor.setter
    def forfactor(self, forfactor):
        """Sets the forfactor of this Split.

        For factor of the split. Used to calculate the split ratio forfactor/tofactor = ratio (eg ½ = 0.5)   # noqa: E501

        :param forfactor: The forfactor of this Split.  # noqa: E501
        :type: float
        """
        if forfactor is None:
            raise ValueError("Invalid value for `forfactor`, must not be `None`")  # noqa: E501

        self._forfactor = forfactor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Split, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Split):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
