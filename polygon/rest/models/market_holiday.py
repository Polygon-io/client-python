# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MarketHoliday(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exchange': 'str',
        'name': 'str',
        'status': 'str',
        '_date': 'datetime',
        'open': 'datetime',
        'close': 'datetime'
    }

    attribute_map = {
        'exchange': 'exchange',
        'name': 'name',
        'status': 'status',
        '_date': 'date',
        'open': 'open',
        'close': 'close'
    }

    def __init__(self, exchange=None, name=None, status=None, _date=None, open=None, close=None):  # noqa: E501
        """MarketHoliday - a model defined in Swagger"""  # noqa: E501
        self._exchange = None
        self._name = None
        self._status = None
        self.__date = None
        self._open = None
        self._close = None
        self.discriminator = None
        self.exchange = exchange
        self.name = name
        self.status = status
        self._date = _date
        if open is not None:
            self.open = open
        if close is not None:
            self.close = close

    @property
    def exchange(self):
        """Gets the exchange of this MarketHoliday.  # noqa: E501

        Which market this record is for  # noqa: E501

        :return: The exchange of this MarketHoliday.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this MarketHoliday.

        Which market this record is for  # noqa: E501

        :param exchange: The exchange of this MarketHoliday.  # noqa: E501
        :type: str
        """
        if exchange is None:
            raise ValueError("Invalid value for `exchange`, must not be `None`")  # noqa: E501
        allowed_values = ["NYSE", "NASDAQ", "OTC"]  # noqa: E501
        if exchange not in allowed_values:
            raise ValueError(
                "Invalid value for `exchange` ({0}), must be one of {1}"  # noqa: E501
                .format(exchange, allowed_values)
            )

        self._exchange = exchange

    @property
    def name(self):
        """Gets the name of this MarketHoliday.  # noqa: E501

        Human readable description of the holiday  # noqa: E501

        :return: The name of this MarketHoliday.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MarketHoliday.

        Human readable description of the holiday  # noqa: E501

        :param name: The name of this MarketHoliday.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this MarketHoliday.  # noqa: E501

        Status of the market on this holiday  # noqa: E501

        :return: The status of this MarketHoliday.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MarketHoliday.

        Status of the market on this holiday  # noqa: E501

        :param status: The status of this MarketHoliday.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["closed", "early-close", "late-close", "early-open", "late-open"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def _date(self):
        """Gets the _date of this MarketHoliday.  # noqa: E501

        Date of this holiday  # noqa: E501

        :return: The _date of this MarketHoliday.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this MarketHoliday.

        Date of this holiday  # noqa: E501

        :param _date: The _date of this MarketHoliday.  # noqa: E501
        :type: datetime
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")  # noqa: E501

        self.__date = _date

    @property
    def open(self):
        """Gets the open of this MarketHoliday.  # noqa: E501

        Market open time on this holiday ( if it's not closed )  # noqa: E501

        :return: The open of this MarketHoliday.  # noqa: E501
        :rtype: datetime
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this MarketHoliday.

        Market open time on this holiday ( if it's not closed )  # noqa: E501

        :param open: The open of this MarketHoliday.  # noqa: E501
        :type: datetime
        """

        self._open = open

    @property
    def close(self):
        """Gets the close of this MarketHoliday.  # noqa: E501

        Market close time on this holiday ( if it's not closed )  # noqa: E501

        :return: The close of this MarketHoliday.  # noqa: E501
        :rtype: datetime
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this MarketHoliday.

        Market close time on this holiday ( if it's not closed )  # noqa: E501

        :param close: The close of this MarketHoliday.  # noqa: E501
        :type: datetime
        """

        self._close = close

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketHoliday, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketHoliday):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
