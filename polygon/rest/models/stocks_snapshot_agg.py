# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class StocksSnapshotAgg(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'c': 'int',
        'h': 'int',
        'l': 'int',
        'o': 'int',
        'v': 'int'
    }

    attribute_map = {
        'c': 'c',
        'h': 'h',
        'l': 'l',
        'o': 'o',
        'v': 'v'
    }

    def __init__(self, c=None, h=None, l=None, o=None, v=None):  # noqa: E501
        """StocksSnapshotAgg - a model defined in Swagger"""  # noqa: E501
        self._c = None
        self._h = None
        self._l = None
        self._o = None
        self._v = None
        self.discriminator = None
        self.c = c
        self.h = h
        self.l = l
        self.o = o
        self.v = v

    @property
    def c(self):
        """Gets the c of this StocksSnapshotAgg.  # noqa: E501

        Close price  # noqa: E501

        :return: The c of this StocksSnapshotAgg.  # noqa: E501
        :rtype: int
        """
        return self._c

    @c.setter
    def c(self, c):
        """Sets the c of this StocksSnapshotAgg.

        Close price  # noqa: E501

        :param c: The c of this StocksSnapshotAgg.  # noqa: E501
        :type: int
        """
        if c is None:
            raise ValueError("Invalid value for `c`, must not be `None`")  # noqa: E501

        self._c = c

    @property
    def h(self):
        """Gets the h of this StocksSnapshotAgg.  # noqa: E501

        High price  # noqa: E501

        :return: The h of this StocksSnapshotAgg.  # noqa: E501
        :rtype: int
        """
        return self._h

    @h.setter
    def h(self, h):
        """Sets the h of this StocksSnapshotAgg.

        High price  # noqa: E501

        :param h: The h of this StocksSnapshotAgg.  # noqa: E501
        :type: int
        """
        if h is None:
            raise ValueError("Invalid value for `h`, must not be `None`")  # noqa: E501

        self._h = h

    @property
    def l(self):
        """Gets the l of this StocksSnapshotAgg.  # noqa: E501

        Low price  # noqa: E501

        :return: The l of this StocksSnapshotAgg.  # noqa: E501
        :rtype: int
        """
        return self._l

    @l.setter
    def l(self, l):
        """Sets the l of this StocksSnapshotAgg.

        Low price  # noqa: E501

        :param l: The l of this StocksSnapshotAgg.  # noqa: E501
        :type: int
        """
        if l is None:
            raise ValueError("Invalid value for `l`, must not be `None`")  # noqa: E501

        self._l = l

    @property
    def o(self):
        """Gets the o of this StocksSnapshotAgg.  # noqa: E501

        Open price  # noqa: E501

        :return: The o of this StocksSnapshotAgg.  # noqa: E501
        :rtype: int
        """
        return self._o

    @o.setter
    def o(self, o):
        """Sets the o of this StocksSnapshotAgg.

        Open price  # noqa: E501

        :param o: The o of this StocksSnapshotAgg.  # noqa: E501
        :type: int
        """
        if o is None:
            raise ValueError("Invalid value for `o`, must not be `None`")  # noqa: E501

        self._o = o

    @property
    def v(self):
        """Gets the v of this StocksSnapshotAgg.  # noqa: E501

        Volume  # noqa: E501

        :return: The v of this StocksSnapshotAgg.  # noqa: E501
        :rtype: int
        """
        return self._v

    @v.setter
    def v(self, v):
        """Sets the v of this StocksSnapshotAgg.

        Volume  # noqa: E501

        :param v: The v of this StocksSnapshotAgg.  # noqa: E501
        :type: int
        """
        if v is None:
            raise ValueError("Invalid value for `v`, must not be `None`")  # noqa: E501

        self._v = v

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StocksSnapshotAgg, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StocksSnapshotAgg):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
