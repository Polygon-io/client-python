# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Quote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'c': 'int',
        'b_e': 'str',
        'a_e': 'str',
        'a_p': 'int',
        'b_p': 'int',
        'b_s': 'int',
        'a_s': 'int',
        't': 'int'
    }

    attribute_map = {
        'c': 'c',
        'b_e': 'bE',
        'a_e': 'aE',
        'a_p': 'aP',
        'b_p': 'bP',
        'b_s': 'bS',
        'a_s': 'aS',
        't': 't'
    }

    def __init__(self, c=None, b_e=None, a_e=None, a_p=None, b_p=None, b_s=None, a_s=None, t=None):  # noqa: E501
        """Quote - a model defined in Swagger"""  # noqa: E501
        self._c = None
        self._b_e = None
        self._a_e = None
        self._a_p = None
        self._b_p = None
        self._b_s = None
        self._a_s = None
        self._t = None
        self.discriminator = None
        self.c = c
        self.b_e = b_e
        self.a_e = a_e
        self.a_p = a_p
        self.b_p = b_p
        self.b_s = b_s
        self.a_s = a_s
        self.t = t

    @property
    def c(self):
        """Gets the c of this Quote.  # noqa: E501

        Condition of this quote  # noqa: E501

        :return: The c of this Quote.  # noqa: E501
        :rtype: int
        """
        return self._c

    @c.setter
    def c(self, c):
        """Sets the c of this Quote.

        Condition of this quote  # noqa: E501

        :param c: The c of this Quote.  # noqa: E501
        :type: int
        """
        if c is None:
            raise ValueError("Invalid value for `c`, must not be `None`")  # noqa: E501

        self._c = c

    @property
    def b_e(self):
        """Gets the b_e of this Quote.  # noqa: E501

        Bid Exchange  # noqa: E501

        :return: The b_e of this Quote.  # noqa: E501
        :rtype: str
        """
        return self._b_e

    @b_e.setter
    def b_e(self, b_e):
        """Sets the b_e of this Quote.

        Bid Exchange  # noqa: E501

        :param b_e: The b_e of this Quote.  # noqa: E501
        :type: str
        """
        if b_e is None:
            raise ValueError("Invalid value for `b_e`, must not be `None`")  # noqa: E501

        self._b_e = b_e

    @property
    def a_e(self):
        """Gets the a_e of this Quote.  # noqa: E501

        Ask Exchange  # noqa: E501

        :return: The a_e of this Quote.  # noqa: E501
        :rtype: str
        """
        return self._a_e

    @a_e.setter
    def a_e(self, a_e):
        """Sets the a_e of this Quote.

        Ask Exchange  # noqa: E501

        :param a_e: The a_e of this Quote.  # noqa: E501
        :type: str
        """
        if a_e is None:
            raise ValueError("Invalid value for `a_e`, must not be `None`")  # noqa: E501

        self._a_e = a_e

    @property
    def a_p(self):
        """Gets the a_p of this Quote.  # noqa: E501

        Ask Price  # noqa: E501

        :return: The a_p of this Quote.  # noqa: E501
        :rtype: int
        """
        return self._a_p

    @a_p.setter
    def a_p(self, a_p):
        """Sets the a_p of this Quote.

        Ask Price  # noqa: E501

        :param a_p: The a_p of this Quote.  # noqa: E501
        :type: int
        """
        if a_p is None:
            raise ValueError("Invalid value for `a_p`, must not be `None`")  # noqa: E501

        self._a_p = a_p

    @property
    def b_p(self):
        """Gets the b_p of this Quote.  # noqa: E501

        Bid Price  # noqa: E501

        :return: The b_p of this Quote.  # noqa: E501
        :rtype: int
        """
        return self._b_p

    @b_p.setter
    def b_p(self, b_p):
        """Sets the b_p of this Quote.

        Bid Price  # noqa: E501

        :param b_p: The b_p of this Quote.  # noqa: E501
        :type: int
        """
        if b_p is None:
            raise ValueError("Invalid value for `b_p`, must not be `None`")  # noqa: E501

        self._b_p = b_p

    @property
    def b_s(self):
        """Gets the b_s of this Quote.  # noqa: E501

        Bid Size  # noqa: E501

        :return: The b_s of this Quote.  # noqa: E501
        :rtype: int
        """
        return self._b_s

    @b_s.setter
    def b_s(self, b_s):
        """Sets the b_s of this Quote.

        Bid Size  # noqa: E501

        :param b_s: The b_s of this Quote.  # noqa: E501
        :type: int
        """
        if b_s is None:
            raise ValueError("Invalid value for `b_s`, must not be `None`")  # noqa: E501

        self._b_s = b_s

    @property
    def a_s(self):
        """Gets the a_s of this Quote.  # noqa: E501

        Ask Size  # noqa: E501

        :return: The a_s of this Quote.  # noqa: E501
        :rtype: int
        """
        return self._a_s

    @a_s.setter
    def a_s(self, a_s):
        """Sets the a_s of this Quote.

        Ask Size  # noqa: E501

        :param a_s: The a_s of this Quote.  # noqa: E501
        :type: int
        """
        if a_s is None:
            raise ValueError("Invalid value for `a_s`, must not be `None`")  # noqa: E501

        self._a_s = a_s

    @property
    def t(self):
        """Gets the t of this Quote.  # noqa: E501

        Timestamp of this trade  # noqa: E501

        :return: The t of this Quote.  # noqa: E501
        :rtype: int
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this Quote.

        Timestamp of this trade  # noqa: E501

        :param t: The t of this Quote.  # noqa: E501
        :type: int
        """
        if t is None:
            raise ValueError("Invalid value for `t`, must not be `None`")  # noqa: E501

        self._t = t

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Quote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Quote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
