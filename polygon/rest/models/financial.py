# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Financial(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'report_date': 'datetime',
        'report_date_str': 'str',
        'gross_profit': 'float',
        'cost_of_revenue': 'float',
        'operating_revenue': 'float',
        'total_revenue': 'float',
        'operating_income': 'float',
        'net_income': 'float',
        'research_and_development': 'float',
        'operating_expense': 'float',
        'current_assets': 'float',
        'total_assets': 'float',
        'total_liabilities': 'float',
        'current_cash': 'float',
        'current_debt': 'float',
        'total_cash': 'float',
        'total_debt': 'float',
        'shareholder_equity': 'float',
        'cash_change': 'float',
        'cash_flow': 'float',
        'operating_gains_losses': 'float'
    }

    attribute_map = {
        'symbol': 'symbol',
        'report_date': 'reportDate',
        'report_date_str': 'reportDateStr',
        'gross_profit': 'grossProfit',
        'cost_of_revenue': 'costOfRevenue',
        'operating_revenue': 'operatingRevenue',
        'total_revenue': 'totalRevenue',
        'operating_income': 'operatingIncome',
        'net_income': 'netIncome',
        'research_and_development': 'researchAndDevelopment',
        'operating_expense': 'operatingExpense',
        'current_assets': 'currentAssets',
        'total_assets': 'totalAssets',
        'total_liabilities': 'totalLiabilities',
        'current_cash': 'currentCash',
        'current_debt': 'currentDebt',
        'total_cash': 'totalCash',
        'total_debt': 'totalDebt',
        'shareholder_equity': 'shareholderEquity',
        'cash_change': 'cashChange',
        'cash_flow': 'cashFlow',
        'operating_gains_losses': 'operatingGainsLosses'
    }

    def __init__(self, symbol=None, report_date=None, report_date_str=None, gross_profit=None, cost_of_revenue=None, operating_revenue=None, total_revenue=None, operating_income=None, net_income=None, research_and_development=None, operating_expense=None, current_assets=None, total_assets=None, total_liabilities=None, current_cash=None, current_debt=None, total_cash=None, total_debt=None, shareholder_equity=None, cash_change=None, cash_flow=None, operating_gains_losses=None):  # noqa: E501
        """Financial - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._report_date = None
        self._report_date_str = None
        self._gross_profit = None
        self._cost_of_revenue = None
        self._operating_revenue = None
        self._total_revenue = None
        self._operating_income = None
        self._net_income = None
        self._research_and_development = None
        self._operating_expense = None
        self._current_assets = None
        self._total_assets = None
        self._total_liabilities = None
        self._current_cash = None
        self._current_debt = None
        self._total_cash = None
        self._total_debt = None
        self._shareholder_equity = None
        self._cash_change = None
        self._cash_flow = None
        self._operating_gains_losses = None
        self.discriminator = None
        self.symbol = symbol
        self.report_date = report_date
        self.report_date_str = report_date_str
        if gross_profit is not None:
            self.gross_profit = gross_profit
        if cost_of_revenue is not None:
            self.cost_of_revenue = cost_of_revenue
        if operating_revenue is not None:
            self.operating_revenue = operating_revenue
        if total_revenue is not None:
            self.total_revenue = total_revenue
        if operating_income is not None:
            self.operating_income = operating_income
        if net_income is not None:
            self.net_income = net_income
        if research_and_development is not None:
            self.research_and_development = research_and_development
        if operating_expense is not None:
            self.operating_expense = operating_expense
        if current_assets is not None:
            self.current_assets = current_assets
        if total_assets is not None:
            self.total_assets = total_assets
        if total_liabilities is not None:
            self.total_liabilities = total_liabilities
        if current_cash is not None:
            self.current_cash = current_cash
        if current_debt is not None:
            self.current_debt = current_debt
        if total_cash is not None:
            self.total_cash = total_cash
        if total_debt is not None:
            self.total_debt = total_debt
        if shareholder_equity is not None:
            self.shareholder_equity = shareholder_equity
        if cash_change is not None:
            self.cash_change = cash_change
        if cash_flow is not None:
            self.cash_flow = cash_flow
        if operating_gains_losses is not None:
            self.operating_gains_losses = operating_gains_losses

    @property
    def symbol(self):
        """Gets the symbol of this Financial.  # noqa: E501

        Stock Symbol  # noqa: E501

        :return: The symbol of this Financial.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Financial.

        Stock Symbol  # noqa: E501

        :param symbol: The symbol of this Financial.  # noqa: E501
        :type: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def report_date(self):
        """Gets the report_date of this Financial.  # noqa: E501

        Report Date  # noqa: E501

        :return: The report_date of this Financial.  # noqa: E501
        :rtype: datetime
        """
        return self._report_date

    @report_date.setter
    def report_date(self, report_date):
        """Sets the report_date of this Financial.

        Report Date  # noqa: E501

        :param report_date: The report_date of this Financial.  # noqa: E501
        :type: datetime
        """
        if report_date is None:
            raise ValueError("Invalid value for `report_date`, must not be `None`")  # noqa: E501

        self._report_date = report_date

    @property
    def report_date_str(self):
        """Gets the report_date_str of this Financial.  # noqa: E501

        Report date as non date format  # noqa: E501

        :return: The report_date_str of this Financial.  # noqa: E501
        :rtype: str
        """
        return self._report_date_str

    @report_date_str.setter
    def report_date_str(self, report_date_str):
        """Sets the report_date_str of this Financial.

        Report date as non date format  # noqa: E501

        :param report_date_str: The report_date_str of this Financial.  # noqa: E501
        :type: str
        """
        if report_date_str is None:
            raise ValueError("Invalid value for `report_date_str`, must not be `None`")  # noqa: E501

        self._report_date_str = report_date_str

    @property
    def gross_profit(self):
        """Gets the gross_profit of this Financial.  # noqa: E501


        :return: The gross_profit of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._gross_profit

    @gross_profit.setter
    def gross_profit(self, gross_profit):
        """Sets the gross_profit of this Financial.


        :param gross_profit: The gross_profit of this Financial.  # noqa: E501
        :type: float
        """

        self._gross_profit = gross_profit

    @property
    def cost_of_revenue(self):
        """Gets the cost_of_revenue of this Financial.  # noqa: E501


        :return: The cost_of_revenue of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._cost_of_revenue

    @cost_of_revenue.setter
    def cost_of_revenue(self, cost_of_revenue):
        """Sets the cost_of_revenue of this Financial.


        :param cost_of_revenue: The cost_of_revenue of this Financial.  # noqa: E501
        :type: float
        """

        self._cost_of_revenue = cost_of_revenue

    @property
    def operating_revenue(self):
        """Gets the operating_revenue of this Financial.  # noqa: E501


        :return: The operating_revenue of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._operating_revenue

    @operating_revenue.setter
    def operating_revenue(self, operating_revenue):
        """Sets the operating_revenue of this Financial.


        :param operating_revenue: The operating_revenue of this Financial.  # noqa: E501
        :type: float
        """

        self._operating_revenue = operating_revenue

    @property
    def total_revenue(self):
        """Gets the total_revenue of this Financial.  # noqa: E501


        :return: The total_revenue of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._total_revenue

    @total_revenue.setter
    def total_revenue(self, total_revenue):
        """Sets the total_revenue of this Financial.


        :param total_revenue: The total_revenue of this Financial.  # noqa: E501
        :type: float
        """

        self._total_revenue = total_revenue

    @property
    def operating_income(self):
        """Gets the operating_income of this Financial.  # noqa: E501


        :return: The operating_income of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._operating_income

    @operating_income.setter
    def operating_income(self, operating_income):
        """Sets the operating_income of this Financial.


        :param operating_income: The operating_income of this Financial.  # noqa: E501
        :type: float
        """

        self._operating_income = operating_income

    @property
    def net_income(self):
        """Gets the net_income of this Financial.  # noqa: E501


        :return: The net_income of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._net_income

    @net_income.setter
    def net_income(self, net_income):
        """Sets the net_income of this Financial.


        :param net_income: The net_income of this Financial.  # noqa: E501
        :type: float
        """

        self._net_income = net_income

    @property
    def research_and_development(self):
        """Gets the research_and_development of this Financial.  # noqa: E501


        :return: The research_and_development of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._research_and_development

    @research_and_development.setter
    def research_and_development(self, research_and_development):
        """Sets the research_and_development of this Financial.


        :param research_and_development: The research_and_development of this Financial.  # noqa: E501
        :type: float
        """

        self._research_and_development = research_and_development

    @property
    def operating_expense(self):
        """Gets the operating_expense of this Financial.  # noqa: E501


        :return: The operating_expense of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._operating_expense

    @operating_expense.setter
    def operating_expense(self, operating_expense):
        """Sets the operating_expense of this Financial.


        :param operating_expense: The operating_expense of this Financial.  # noqa: E501
        :type: float
        """

        self._operating_expense = operating_expense

    @property
    def current_assets(self):
        """Gets the current_assets of this Financial.  # noqa: E501


        :return: The current_assets of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._current_assets

    @current_assets.setter
    def current_assets(self, current_assets):
        """Sets the current_assets of this Financial.


        :param current_assets: The current_assets of this Financial.  # noqa: E501
        :type: float
        """

        self._current_assets = current_assets

    @property
    def total_assets(self):
        """Gets the total_assets of this Financial.  # noqa: E501


        :return: The total_assets of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._total_assets

    @total_assets.setter
    def total_assets(self, total_assets):
        """Sets the total_assets of this Financial.


        :param total_assets: The total_assets of this Financial.  # noqa: E501
        :type: float
        """

        self._total_assets = total_assets

    @property
    def total_liabilities(self):
        """Gets the total_liabilities of this Financial.  # noqa: E501


        :return: The total_liabilities of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._total_liabilities

    @total_liabilities.setter
    def total_liabilities(self, total_liabilities):
        """Sets the total_liabilities of this Financial.


        :param total_liabilities: The total_liabilities of this Financial.  # noqa: E501
        :type: float
        """

        self._total_liabilities = total_liabilities

    @property
    def current_cash(self):
        """Gets the current_cash of this Financial.  # noqa: E501


        :return: The current_cash of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._current_cash

    @current_cash.setter
    def current_cash(self, current_cash):
        """Sets the current_cash of this Financial.


        :param current_cash: The current_cash of this Financial.  # noqa: E501
        :type: float
        """

        self._current_cash = current_cash

    @property
    def current_debt(self):
        """Gets the current_debt of this Financial.  # noqa: E501


        :return: The current_debt of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._current_debt

    @current_debt.setter
    def current_debt(self, current_debt):
        """Sets the current_debt of this Financial.


        :param current_debt: The current_debt of this Financial.  # noqa: E501
        :type: float
        """

        self._current_debt = current_debt

    @property
    def total_cash(self):
        """Gets the total_cash of this Financial.  # noqa: E501


        :return: The total_cash of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._total_cash

    @total_cash.setter
    def total_cash(self, total_cash):
        """Sets the total_cash of this Financial.


        :param total_cash: The total_cash of this Financial.  # noqa: E501
        :type: float
        """

        self._total_cash = total_cash

    @property
    def total_debt(self):
        """Gets the total_debt of this Financial.  # noqa: E501


        :return: The total_debt of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._total_debt

    @total_debt.setter
    def total_debt(self, total_debt):
        """Sets the total_debt of this Financial.


        :param total_debt: The total_debt of this Financial.  # noqa: E501
        :type: float
        """

        self._total_debt = total_debt

    @property
    def shareholder_equity(self):
        """Gets the shareholder_equity of this Financial.  # noqa: E501


        :return: The shareholder_equity of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._shareholder_equity

    @shareholder_equity.setter
    def shareholder_equity(self, shareholder_equity):
        """Sets the shareholder_equity of this Financial.


        :param shareholder_equity: The shareholder_equity of this Financial.  # noqa: E501
        :type: float
        """

        self._shareholder_equity = shareholder_equity

    @property
    def cash_change(self):
        """Gets the cash_change of this Financial.  # noqa: E501


        :return: The cash_change of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._cash_change

    @cash_change.setter
    def cash_change(self, cash_change):
        """Sets the cash_change of this Financial.


        :param cash_change: The cash_change of this Financial.  # noqa: E501
        :type: float
        """

        self._cash_change = cash_change

    @property
    def cash_flow(self):
        """Gets the cash_flow of this Financial.  # noqa: E501


        :return: The cash_flow of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._cash_flow

    @cash_flow.setter
    def cash_flow(self, cash_flow):
        """Sets the cash_flow of this Financial.


        :param cash_flow: The cash_flow of this Financial.  # noqa: E501
        :type: float
        """

        self._cash_flow = cash_flow

    @property
    def operating_gains_losses(self):
        """Gets the operating_gains_losses of this Financial.  # noqa: E501


        :return: The operating_gains_losses of this Financial.  # noqa: E501
        :rtype: float
        """
        return self._operating_gains_losses

    @operating_gains_losses.setter
    def operating_gains_losses(self, operating_gains_losses):
        """Sets the operating_gains_losses of this Financial.


        :param operating_gains_losses: The operating_gains_losses of this Financial.  # noqa: E501
        :type: float
        """

        self._operating_gains_losses = operating_gains_losses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Financial, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Financial):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
