# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Symbol(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'StockSymbol',
        'name': 'str',
        'type': 'str',
        'url': 'str',
        'updated': 'datetime',
        'is_otc': 'bool'
    }

    attribute_map = {
        'symbol': 'symbol',
        'name': 'name',
        'type': 'type',
        'url': 'url',
        'updated': 'updated',
        'is_otc': 'isOTC'
    }

    def __init__(self, symbol=None, name=None, type=None, url=None, updated=None, is_otc=None):  # noqa: E501
        """Symbol - a model defined in Swagger"""  # noqa: E501
        self._symbol = None
        self._name = None
        self._type = None
        self._url = None
        self._updated = None
        self._is_otc = None
        self.discriminator = None
        self.symbol = symbol
        self.name = name
        self.type = type
        self.url = url
        self.updated = updated
        self.is_otc = is_otc

    @property
    def symbol(self):
        """Gets the symbol of this Symbol.  # noqa: E501


        :return: The symbol of this Symbol.  # noqa: E501
        :rtype: StockSymbol
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Symbol.


        :param symbol: The symbol of this Symbol.  # noqa: E501
        :type: StockSymbol
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def name(self):
        """Gets the name of this Symbol.  # noqa: E501

        Name of the item.  # noqa: E501

        :return: The name of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Symbol.

        Name of the item.  # noqa: E501

        :param name: The name of this Symbol.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self):
        """Gets the type of this Symbol.  # noqa: E501

        Type of symbol this is. See symbol types.  # noqa: E501

        :return: The type of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Symbol.

        Type of symbol this is. See symbol types.  # noqa: E501

        :param type: The type of this Symbol.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def url(self):
        """Gets the url of this Symbol.  # noqa: E501

        URL of this symbol. Use this to get this symbols endpoints.  # noqa: E501

        :return: The url of this Symbol.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Symbol.

        URL of this symbol. Use this to get this symbols endpoints.  # noqa: E501

        :param url: The url of this Symbol.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def updated(self):
        """Gets the updated of this Symbol.  # noqa: E501

        Last time this company record was updated.  # noqa: E501

        :return: The updated of this Symbol.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Symbol.

        Last time this company record was updated.  # noqa: E501

        :param updated: The updated of this Symbol.  # noqa: E501
        :type: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    @property
    def is_otc(self):
        """Gets the is_otc of this Symbol.  # noqa: E501

        If the symbol is listed on the OTC Markets.  # noqa: E501

        :return: The is_otc of this Symbol.  # noqa: E501
        :rtype: bool
        """
        return self._is_otc

    @is_otc.setter
    def is_otc(self, is_otc):
        """Sets the is_otc of this Symbol.

        If the symbol is listed on the OTC Markets.  # noqa: E501

        :param is_otc: The is_otc of this Symbol.  # noqa: E501
        :type: bool
        """
        if is_otc is None:
            raise ValueError("Invalid value for `is_otc`, must not be `None`")  # noqa: E501

        self._is_otc = is_otc

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Symbol, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Symbol):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
