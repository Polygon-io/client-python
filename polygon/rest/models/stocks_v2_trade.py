# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class StocksV2Trade(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        't': 'str',
        't': 'int',
        'y': 'int',
        'f': 'int',
        'q': 'int',
        'i': 'str',
        'x': 'int',
        's': 'int',
        'c': 'list[int]',
        'p': 'int',
        'z': 'int'
    }

    attribute_map = {
        't': 'T',
        't': 't',
        'y': 'y',
        'f': 'f',
        'q': 'q',
        'i': 'i',
        'x': 'x',
        's': 's',
        'c': 'c',
        'p': 'p',
        'z': 'z'
    }

    def __init__(self, t=None, t=None, y=None, f=None, q=None, i=None, x=None, s=None, c=None, p=None, z=None):  # noqa: E501
        """StocksV2Trade - a model defined in Swagger"""  # noqa: E501
        self._t = None
        self._t = None
        self._y = None
        self._f = None
        self._q = None
        self._i = None
        self._x = None
        self._s = None
        self._c = None
        self._p = None
        self._z = None
        self.discriminator = None
        if t is not None:
            self.t = t
        self.t = t
        if y is not None:
            self.y = y
        if f is not None:
            self.f = f
        self.q = q
        self.i = i
        self.x = x
        self.s = s
        self.c = c
        self.p = p
        self.z = z

    @property
    def t(self):
        """Gets the t of this StocksV2Trade.  # noqa: E501

        Ticker of the object  # noqa: E501

        :return: The t of this StocksV2Trade.  # noqa: E501
        :rtype: str
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this StocksV2Trade.

        Ticker of the object  # noqa: E501

        :param t: The t of this StocksV2Trade.  # noqa: E501
        :type: str
        """

        self._t = t

    @property
    def t(self):
        """Gets the t of this StocksV2Trade.  # noqa: E501

        Nanosecond accuracy SIP Unix Timestamp  # noqa: E501

        :return: The t of this StocksV2Trade.  # noqa: E501
        :rtype: int
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this StocksV2Trade.

        Nanosecond accuracy SIP Unix Timestamp  # noqa: E501

        :param t: The t of this StocksV2Trade.  # noqa: E501
        :type: int
        """
        if t is None:
            raise ValueError("Invalid value for `t`, must not be `None`")  # noqa: E501

        self._t = t

    @property
    def y(self):
        """Gets the y of this StocksV2Trade.  # noqa: E501

        Nanosecond accuracy Participant/Exchange Unix Timestamp  # noqa: E501

        :return: The y of this StocksV2Trade.  # noqa: E501
        :rtype: int
        """
        return self._y

    @y.setter
    def y(self, y):
        """Sets the y of this StocksV2Trade.

        Nanosecond accuracy Participant/Exchange Unix Timestamp  # noqa: E501

        :param y: The y of this StocksV2Trade.  # noqa: E501
        :type: int
        """

        self._y = y

    @property
    def f(self):
        """Gets the f of this StocksV2Trade.  # noqa: E501

        Nanosecond accuracy TRF(Trade Reporting Facility) Unix Timestamp  # noqa: E501

        :return: The f of this StocksV2Trade.  # noqa: E501
        :rtype: int
        """
        return self._f

    @f.setter
    def f(self, f):
        """Sets the f of this StocksV2Trade.

        Nanosecond accuracy TRF(Trade Reporting Facility) Unix Timestamp  # noqa: E501

        :param f: The f of this StocksV2Trade.  # noqa: E501
        :type: int
        """

        self._f = f

    @property
    def q(self):
        """Gets the q of this StocksV2Trade.  # noqa: E501

        Sequence Number  # noqa: E501

        :return: The q of this StocksV2Trade.  # noqa: E501
        :rtype: int
        """
        return self._q

    @q.setter
    def q(self, q):
        """Sets the q of this StocksV2Trade.

        Sequence Number  # noqa: E501

        :param q: The q of this StocksV2Trade.  # noqa: E501
        :type: int
        """
        if q is None:
            raise ValueError("Invalid value for `q`, must not be `None`")  # noqa: E501

        self._q = q

    @property
    def i(self):
        """Gets the i of this StocksV2Trade.  # noqa: E501

        Trade ID  # noqa: E501

        :return: The i of this StocksV2Trade.  # noqa: E501
        :rtype: str
        """
        return self._i

    @i.setter
    def i(self, i):
        """Sets the i of this StocksV2Trade.

        Trade ID  # noqa: E501

        :param i: The i of this StocksV2Trade.  # noqa: E501
        :type: str
        """
        if i is None:
            raise ValueError("Invalid value for `i`, must not be `None`")  # noqa: E501

        self._i = i

    @property
    def x(self):
        """Gets the x of this StocksV2Trade.  # noqa: E501

        Exchange ID  # noqa: E501

        :return: The x of this StocksV2Trade.  # noqa: E501
        :rtype: int
        """
        return self._x

    @x.setter
    def x(self, x):
        """Sets the x of this StocksV2Trade.

        Exchange ID  # noqa: E501

        :param x: The x of this StocksV2Trade.  # noqa: E501
        :type: int
        """
        if x is None:
            raise ValueError("Invalid value for `x`, must not be `None`")  # noqa: E501

        self._x = x

    @property
    def s(self):
        """Gets the s of this StocksV2Trade.  # noqa: E501

        Size/Volume of the trade  # noqa: E501

        :return: The s of this StocksV2Trade.  # noqa: E501
        :rtype: int
        """
        return self._s

    @s.setter
    def s(self, s):
        """Sets the s of this StocksV2Trade.

        Size/Volume of the trade  # noqa: E501

        :param s: The s of this StocksV2Trade.  # noqa: E501
        :type: int
        """
        if s is None:
            raise ValueError("Invalid value for `s`, must not be `None`")  # noqa: E501

        self._s = s

    @property
    def c(self):
        """Gets the c of this StocksV2Trade.  # noqa: E501

        Conditions  # noqa: E501

        :return: The c of this StocksV2Trade.  # noqa: E501
        :rtype: list[int]
        """
        return self._c

    @c.setter
    def c(self, c):
        """Sets the c of this StocksV2Trade.

        Conditions  # noqa: E501

        :param c: The c of this StocksV2Trade.  # noqa: E501
        :type: list[int]
        """
        if c is None:
            raise ValueError("Invalid value for `c`, must not be `None`")  # noqa: E501

        self._c = c

    @property
    def p(self):
        """Gets the p of this StocksV2Trade.  # noqa: E501

        Price of the trade  # noqa: E501

        :return: The p of this StocksV2Trade.  # noqa: E501
        :rtype: int
        """
        return self._p

    @p.setter
    def p(self, p):
        """Sets the p of this StocksV2Trade.

        Price of the trade  # noqa: E501

        :param p: The p of this StocksV2Trade.  # noqa: E501
        :type: int
        """
        if p is None:
            raise ValueError("Invalid value for `p`, must not be `None`")  # noqa: E501

        self._p = p

    @property
    def z(self):
        """Gets the z of this StocksV2Trade.  # noqa: E501

        Tape where trade occured. ( 1,2 = CTA, 3 = UTP )  # noqa: E501

        :return: The z of this StocksV2Trade.  # noqa: E501
        :rtype: int
        """
        return self._z

    @z.setter
    def z(self, z):
        """Sets the z of this StocksV2Trade.

        Tape where trade occured. ( 1,2 = CTA, 3 = UTP )  # noqa: E501

        :param z: The z of this StocksV2Trade.  # noqa: E501
        :type: int
        """
        if z is None:
            raise ValueError("Invalid value for `z`, must not be `None`")  # noqa: E501

        self._z = z

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StocksV2Trade, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StocksV2Trade):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
