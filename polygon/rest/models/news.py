# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class News(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbols': 'list[StockSymbol]',
        'title': 'str',
        'url': 'str',
        'source': 'str',
        'summary': 'str',
        'image': 'str',
        'timestamp': 'datetime',
        'keywords': 'list[object]'
    }

    attribute_map = {
        'symbols': 'symbols',
        'title': 'title',
        'url': 'url',
        'source': 'source',
        'summary': 'summary',
        'image': 'image',
        'timestamp': 'timestamp',
        'keywords': 'keywords'
    }

    def __init__(self, symbols=None, title=None, url=None, source=None, summary=None, image=None, timestamp=None, keywords=None):  # noqa: E501
        """News - a model defined in Swagger"""  # noqa: E501
        self._symbols = None
        self._title = None
        self._url = None
        self._source = None
        self._summary = None
        self._image = None
        self._timestamp = None
        self._keywords = None
        self.discriminator = None
        self.symbols = symbols
        self.title = title
        self.url = url
        self.source = source
        self.summary = summary
        if image is not None:
            self.image = image
        self.timestamp = timestamp
        if keywords is not None:
            self.keywords = keywords

    @property
    def symbols(self):
        """Gets the symbols of this News.  # noqa: E501


        :return: The symbols of this News.  # noqa: E501
        :rtype: list[StockSymbol]
        """
        return self._symbols

    @symbols.setter
    def symbols(self, symbols):
        """Sets the symbols of this News.


        :param symbols: The symbols of this News.  # noqa: E501
        :type: list[StockSymbol]
        """
        if symbols is None:
            raise ValueError("Invalid value for `symbols`, must not be `None`")  # noqa: E501

        self._symbols = symbols

    @property
    def title(self):
        """Gets the title of this News.  # noqa: E501

        Name of the article  # noqa: E501

        :return: The title of this News.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this News.

        Name of the article  # noqa: E501

        :param title: The title of this News.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def url(self):
        """Gets the url of this News.  # noqa: E501

        URL of this article  # noqa: E501

        :return: The url of this News.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this News.

        URL of this article  # noqa: E501

        :param url: The url of this News.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def source(self):
        """Gets the source of this News.  # noqa: E501

        Source of this article  # noqa: E501

        :return: The source of this News.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this News.

        Source of this article  # noqa: E501

        :param source: The source of this News.  # noqa: E501
        :type: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")  # noqa: E501

        self._source = source

    @property
    def summary(self):
        """Gets the summary of this News.  # noqa: E501

        Short summary of the article  # noqa: E501

        :return: The summary of this News.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this News.

        Short summary of the article  # noqa: E501

        :param summary: The summary of this News.  # noqa: E501
        :type: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501

        self._summary = summary

    @property
    def image(self):
        """Gets the image of this News.  # noqa: E501

        URL of the image for this article, if found  # noqa: E501

        :return: The image of this News.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this News.

        URL of the image for this article, if found  # noqa: E501

        :param image: The image of this News.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def timestamp(self):
        """Gets the timestamp of this News.  # noqa: E501

        Timestamp of the article  # noqa: E501

        :return: The timestamp of this News.  # noqa: E501
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this News.

        Timestamp of the article  # noqa: E501

        :param timestamp: The timestamp of this News.  # noqa: E501
        :type: datetime
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def keywords(self):
        """Gets the keywords of this News.  # noqa: E501


        :return: The keywords of this News.  # noqa: E501
        :rtype: list[object]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this News.


        :param keywords: The keywords of this News.  # noqa: E501
        :type: list[object]
        """

        self._keywords = keywords

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(News, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, News):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
