# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class MarketStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'market': 'str',
        'server_time': 'datetime',
        'exchanges': 'object',
        'currencies': 'object'
    }

    attribute_map = {
        'market': 'market',
        'server_time': 'serverTime',
        'exchanges': 'exchanges',
        'currencies': 'currencies'
    }

    def __init__(self, market=None, server_time=None, exchanges=None, currencies=None):  # noqa: E501
        """MarketStatus - a model defined in Swagger"""  # noqa: E501
        self._market = None
        self._server_time = None
        self._exchanges = None
        self._currencies = None
        self.discriminator = None
        self.market = market
        self.server_time = server_time
        self.exchanges = exchanges
        if currencies is not None:
            self.currencies = currencies

    @property
    def market(self):
        """Gets the market of this MarketStatus.  # noqa: E501

        Status of the market as a whole  # noqa: E501

        :return: The market of this MarketStatus.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this MarketStatus.

        Status of the market as a whole  # noqa: E501

        :param market: The market of this MarketStatus.  # noqa: E501
        :type: str
        """
        if market is None:
            raise ValueError("Invalid value for `market`, must not be `None`")  # noqa: E501
        allowed_values = ["open", "closed", "extended-hours"]  # noqa: E501
        if market not in allowed_values:
            raise ValueError(
                "Invalid value for `market` ({0}), must be one of {1}"  # noqa: E501
                .format(market, allowed_values)
            )

        self._market = market

    @property
    def server_time(self):
        """Gets the server_time of this MarketStatus.  # noqa: E501

        Current time of the server  # noqa: E501

        :return: The server_time of this MarketStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._server_time

    @server_time.setter
    def server_time(self, server_time):
        """Sets the server_time of this MarketStatus.

        Current time of the server  # noqa: E501

        :param server_time: The server_time of this MarketStatus.  # noqa: E501
        :type: datetime
        """
        if server_time is None:
            raise ValueError("Invalid value for `server_time`, must not be `None`")  # noqa: E501

        self._server_time = server_time

    @property
    def exchanges(self):
        """Gets the exchanges of this MarketStatus.  # noqa: E501


        :return: The exchanges of this MarketStatus.  # noqa: E501
        :rtype: object
        """
        return self._exchanges

    @exchanges.setter
    def exchanges(self, exchanges):
        """Sets the exchanges of this MarketStatus.


        :param exchanges: The exchanges of this MarketStatus.  # noqa: E501
        :type: object
        """
        if exchanges is None:
            raise ValueError("Invalid value for `exchanges`, must not be `None`")  # noqa: E501

        self._exchanges = exchanges

    @property
    def currencies(self):
        """Gets the currencies of this MarketStatus.  # noqa: E501


        :return: The currencies of this MarketStatus.  # noqa: E501
        :rtype: object
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies):
        """Sets the currencies of this MarketStatus.


        :param currencies: The currencies of this MarketStatus.  # noqa: E501
        :type: object
        """

        self._currencies = currencies

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
