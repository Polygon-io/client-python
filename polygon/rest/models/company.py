# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class Company(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'logo': 'str',
        'exchange': 'str',
        'name': 'str',
        'symbol': 'StockSymbol',
        'listdate': 'date',
        'cik': 'str',
        'bloomberg': 'str',
        'figi': 'str',
        'lei': 'str',
        'sic': 'float',
        'country': 'str',
        'industry': 'str',
        'sector': 'str',
        'marketcap': 'float',
        'employees': 'float',
        'phone': 'str',
        'ceo': 'str',
        'url': 'str',
        'description': 'str',
        'similar': 'list[StockSymbol]',
        'tags': 'list[str]',
        'updated': 'datetime'
    }

    attribute_map = {
        'logo': 'logo',
        'exchange': 'exchange',
        'name': 'name',
        'symbol': 'symbol',
        'listdate': 'listdate',
        'cik': 'cik',
        'bloomberg': 'bloomberg',
        'figi': 'figi',
        'lei': 'lei',
        'sic': 'sic',
        'country': 'country',
        'industry': 'industry',
        'sector': 'sector',
        'marketcap': 'marketcap',
        'employees': 'employees',
        'phone': 'phone',
        'ceo': 'ceo',
        'url': 'url',
        'description': 'description',
        'similar': 'similar',
        'tags': 'tags',
        'updated': 'updated'
    }

    def __init__(self, logo=None, exchange=None, name=None, symbol=None, listdate=None, cik=None, bloomberg=None, figi=None, lei=None, sic=None, country=None, industry=None, sector=None, marketcap=None, employees=None, phone=None, ceo=None, url=None, description=None, similar=None, tags=None, updated=None):  # noqa: E501
        """Company - a model defined in Swagger"""  # noqa: E501
        self._logo = None
        self._exchange = None
        self._name = None
        self._symbol = None
        self._listdate = None
        self._cik = None
        self._bloomberg = None
        self._figi = None
        self._lei = None
        self._sic = None
        self._country = None
        self._industry = None
        self._sector = None
        self._marketcap = None
        self._employees = None
        self._phone = None
        self._ceo = None
        self._url = None
        self._description = None
        self._similar = None
        self._tags = None
        self._updated = None
        self.discriminator = None
        if logo is not None:
            self.logo = logo
        self.exchange = exchange
        self.name = name
        self.symbol = symbol
        if listdate is not None:
            self.listdate = listdate
        if cik is not None:
            self.cik = cik
        if bloomberg is not None:
            self.bloomberg = bloomberg
        if figi is not None:
            self.figi = figi
        if lei is not None:
            self.lei = lei
        if sic is not None:
            self.sic = sic
        if country is not None:
            self.country = country
        if industry is not None:
            self.industry = industry
        if sector is not None:
            self.sector = sector
        if marketcap is not None:
            self.marketcap = marketcap
        if employees is not None:
            self.employees = employees
        if phone is not None:
            self.phone = phone
        if ceo is not None:
            self.ceo = ceo
        if url is not None:
            self.url = url
        self.description = description
        if similar is not None:
            self.similar = similar
        if tags is not None:
            self.tags = tags
        self.updated = updated

    @property
    def logo(self):
        """Gets the logo of this Company.  # noqa: E501

        URL of the entities logo.  # noqa: E501

        :return: The logo of this Company.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Company.

        URL of the entities logo.  # noqa: E501

        :param logo: The logo of this Company.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def exchange(self):
        """Gets the exchange of this Company.  # noqa: E501

        Symbols primary exchange  # noqa: E501

        :return: The exchange of this Company.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this Company.

        Symbols primary exchange  # noqa: E501

        :param exchange: The exchange of this Company.  # noqa: E501
        :type: str
        """
        if exchange is None:
            raise ValueError("Invalid value for `exchange`, must not be `None`")  # noqa: E501

        self._exchange = exchange

    @property
    def name(self):
        """Gets the name of this Company.  # noqa: E501

        Name of the company/entity  # noqa: E501

        :return: The name of this Company.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Company.

        Name of the company/entity  # noqa: E501

        :param name: The name of this Company.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def symbol(self):
        """Gets the symbol of this Company.  # noqa: E501


        :return: The symbol of this Company.  # noqa: E501
        :rtype: StockSymbol
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Company.


        :param symbol: The symbol of this Company.  # noqa: E501
        :type: StockSymbol
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def listdate(self):
        """Gets the listdate of this Company.  # noqa: E501

        Date this symbol was listed on the exchange.  # noqa: E501

        :return: The listdate of this Company.  # noqa: E501
        :rtype: date
        """
        return self._listdate

    @listdate.setter
    def listdate(self, listdate):
        """Sets the listdate of this Company.

        Date this symbol was listed on the exchange.  # noqa: E501

        :param listdate: The listdate of this Company.  # noqa: E501
        :type: date
        """

        self._listdate = listdate

    @property
    def cik(self):
        """Gets the cik of this Company.  # noqa: E501

        Official CIK guid used for SEC database / filings.  # noqa: E501

        :return: The cik of this Company.  # noqa: E501
        :rtype: str
        """
        return self._cik

    @cik.setter
    def cik(self, cik):
        """Sets the cik of this Company.

        Official CIK guid used for SEC database / filings.  # noqa: E501

        :param cik: The cik of this Company.  # noqa: E501
        :type: str
        """

        self._cik = cik

    @property
    def bloomberg(self):
        """Gets the bloomberg of this Company.  # noqa: E501

        Bloomberg guid for this symbol  # noqa: E501

        :return: The bloomberg of this Company.  # noqa: E501
        :rtype: str
        """
        return self._bloomberg

    @bloomberg.setter
    def bloomberg(self, bloomberg):
        """Sets the bloomberg of this Company.

        Bloomberg guid for this symbol  # noqa: E501

        :param bloomberg: The bloomberg of this Company.  # noqa: E501
        :type: str
        """

        self._bloomberg = bloomberg

    @property
    def figi(self):
        """Gets the figi of this Company.  # noqa: E501

        guid for the OpenFigi project ( https://openfigi.com/ )  # noqa: E501

        :return: The figi of this Company.  # noqa: E501
        :rtype: str
        """
        return self._figi

    @figi.setter
    def figi(self, figi):
        """Sets the figi of this Company.

        guid for the OpenFigi project ( https://openfigi.com/ )  # noqa: E501

        :param figi: The figi of this Company.  # noqa: E501
        :type: str
        """

        self._figi = figi

    @property
    def lei(self):
        """Gets the lei of this Company.  # noqa: E501

        Legal Entity Identifier (LEI) guid for symbol ( https://en.wikipedia.org/wiki/Legal_Entity_Identifier )  # noqa: E501

        :return: The lei of this Company.  # noqa: E501
        :rtype: str
        """
        return self._lei

    @lei.setter
    def lei(self, lei):
        """Sets the lei of this Company.

        Legal Entity Identifier (LEI) guid for symbol ( https://en.wikipedia.org/wiki/Legal_Entity_Identifier )  # noqa: E501

        :param lei: The lei of this Company.  # noqa: E501
        :type: str
        """

        self._lei = lei

    @property
    def sic(self):
        """Gets the sic of this Company.  # noqa: E501

        Standard Industrial Classification (SIC) id for symbol ( https://en.wikipedia.org/wiki/Standard_Industrial_Classification )  # noqa: E501

        :return: The sic of this Company.  # noqa: E501
        :rtype: float
        """
        return self._sic

    @sic.setter
    def sic(self, sic):
        """Sets the sic of this Company.

        Standard Industrial Classification (SIC) id for symbol ( https://en.wikipedia.org/wiki/Standard_Industrial_Classification )  # noqa: E501

        :param sic: The sic of this Company.  # noqa: E501
        :type: float
        """

        self._sic = sic

    @property
    def country(self):
        """Gets the country of this Company.  # noqa: E501

        Country in which this company is registered  # noqa: E501

        :return: The country of this Company.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Company.

        Country in which this company is registered  # noqa: E501

        :param country: The country of this Company.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def industry(self):
        """Gets the industry of this Company.  # noqa: E501

        Industry this company operates in  # noqa: E501

        :return: The industry of this Company.  # noqa: E501
        :rtype: str
        """
        return self._industry

    @industry.setter
    def industry(self, industry):
        """Sets the industry of this Company.

        Industry this company operates in  # noqa: E501

        :param industry: The industry of this Company.  # noqa: E501
        :type: str
        """

        self._industry = industry

    @property
    def sector(self):
        """Gets the sector of this Company.  # noqa: E501

        Sector of the indsutry in which this symbol operates in  # noqa: E501

        :return: The sector of this Company.  # noqa: E501
        :rtype: str
        """
        return self._sector

    @sector.setter
    def sector(self, sector):
        """Sets the sector of this Company.

        Sector of the indsutry in which this symbol operates in  # noqa: E501

        :param sector: The sector of this Company.  # noqa: E501
        :type: str
        """

        self._sector = sector

    @property
    def marketcap(self):
        """Gets the marketcap of this Company.  # noqa: E501

        Current market cap for this company  # noqa: E501

        :return: The marketcap of this Company.  # noqa: E501
        :rtype: float
        """
        return self._marketcap

    @marketcap.setter
    def marketcap(self, marketcap):
        """Sets the marketcap of this Company.

        Current market cap for this company  # noqa: E501

        :param marketcap: The marketcap of this Company.  # noqa: E501
        :type: float
        """

        self._marketcap = marketcap

    @property
    def employees(self):
        """Gets the employees of this Company.  # noqa: E501

        Approximate number of employees  # noqa: E501

        :return: The employees of this Company.  # noqa: E501
        :rtype: float
        """
        return self._employees

    @employees.setter
    def employees(self, employees):
        """Sets the employees of this Company.

        Approximate number of employees  # noqa: E501

        :param employees: The employees of this Company.  # noqa: E501
        :type: float
        """

        self._employees = employees

    @property
    def phone(self):
        """Gets the phone of this Company.  # noqa: E501

        Phone number for this company. Usually corporate contact number.  # noqa: E501

        :return: The phone of this Company.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Company.

        Phone number for this company. Usually corporate contact number.  # noqa: E501

        :param phone: The phone of this Company.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def ceo(self):
        """Gets the ceo of this Company.  # noqa: E501

        Name of the companies current CEO  # noqa: E501

        :return: The ceo of this Company.  # noqa: E501
        :rtype: str
        """
        return self._ceo

    @ceo.setter
    def ceo(self, ceo):
        """Sets the ceo of this Company.

        Name of the companies current CEO  # noqa: E501

        :param ceo: The ceo of this Company.  # noqa: E501
        :type: str
        """

        self._ceo = ceo

    @property
    def url(self):
        """Gets the url of this Company.  # noqa: E501

        URL of the companies website  # noqa: E501

        :return: The url of this Company.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Company.

        URL of the companies website  # noqa: E501

        :param url: The url of this Company.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def description(self):
        """Gets the description of this Company.  # noqa: E501

        A description of the company and what they do/offer  # noqa: E501

        :return: The description of this Company.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Company.

        A description of the company and what they do/offer  # noqa: E501

        :param description: The description of this Company.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def similar(self):
        """Gets the similar of this Company.  # noqa: E501


        :return: The similar of this Company.  # noqa: E501
        :rtype: list[StockSymbol]
        """
        return self._similar

    @similar.setter
    def similar(self, similar):
        """Sets the similar of this Company.


        :param similar: The similar of this Company.  # noqa: E501
        :type: list[StockSymbol]
        """

        self._similar = similar

    @property
    def tags(self):
        """Gets the tags of this Company.  # noqa: E501


        :return: The tags of this Company.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Company.


        :param tags: The tags of this Company.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def updated(self):
        """Gets the updated of this Company.  # noqa: E501

        Last time this company record was updated.  # noqa: E501

        :return: The updated of this Company.  # noqa: E501
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Company.

        Last time this company record was updated.  # noqa: E501

        :param updated: The updated of this Company.  # noqa: E501
        :type: datetime
        """
        if updated is None:
            raise ValueError("Invalid value for `updated`, must not be `None`")  # noqa: E501

        self._updated = updated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Company, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Company):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
