# coding: utf-8

"""
    Polygon API

    The future of fintech.  # noqa: E501

    OpenAPI spec version: 1.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class StocksEquitiesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def v1_historic_quotes_symbol_date_get(self, symbol, _date, **kwargs):  # noqa: E501
        """Historic Quotes  # noqa: E501

        Get historic quotes for a symbol.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_historic_quotes_symbol_date_get(symbol, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Symbol of the company to retrieve (required)
        :param date _date: Date/Day of the historic ticks to retreive (required)
        :param int offset: Timestamp offset, used for pagination. This is the offset at which to start the results. Using the `timestamp` of the last result as the offset will give you the next page of results. 
        :param int limit: Limit the size of response, Max 50000
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_historic_quotes_symbol_date_get_with_http_info(symbol, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_historic_quotes_symbol_date_get_with_http_info(symbol, _date, **kwargs)  # noqa: E501
            return data

    def v1_historic_quotes_symbol_date_get_with_http_info(self, symbol, _date, **kwargs):  # noqa: E501
        """Historic Quotes  # noqa: E501

        Get historic quotes for a symbol.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_historic_quotes_symbol_date_get_with_http_info(symbol, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Symbol of the company to retrieve (required)
        :param date _date: Date/Day of the historic ticks to retreive (required)
        :param int offset: Timestamp offset, used for pagination. This is the offset at which to start the results. Using the `timestamp` of the last result as the offset will give you the next page of results. 
        :param int limit: Limit the size of response, Max 50000
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', '_date', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_historic_quotes_symbol_date_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `v1_historic_quotes_symbol_date_get`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `v1_historic_quotes_symbol_date_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol' in params:
            path_params['symbol'] = params['symbol']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/historic/quotes/{symbol}/{date}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_historic_trades_symbol_date_get(self, symbol, _date, **kwargs):  # noqa: E501
        """Historic Trades  # noqa: E501

        Get historic trades for a symbol.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_historic_trades_symbol_date_get(symbol, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Symbol of the company to retrieve (required)
        :param date _date: Date/Day of the historic ticks to retreive (required)
        :param int offset: Timestamp offset, used for pagination. This is the offset at which to start the results. Using the `timestamp` of the last result as the offset will give you the next page of results. 
        :param int limit: Limit the size of response, Max 50000
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_historic_trades_symbol_date_get_with_http_info(symbol, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_historic_trades_symbol_date_get_with_http_info(symbol, _date, **kwargs)  # noqa: E501
            return data

    def v1_historic_trades_symbol_date_get_with_http_info(self, symbol, _date, **kwargs):  # noqa: E501
        """Historic Trades  # noqa: E501

        Get historic trades for a symbol.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_historic_trades_symbol_date_get_with_http_info(symbol, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Symbol of the company to retrieve (required)
        :param date _date: Date/Day of the historic ticks to retreive (required)
        :param int offset: Timestamp offset, used for pagination. This is the offset at which to start the results. Using the `timestamp` of the last result as the offset will give you the next page of results. 
        :param int limit: Limit the size of response, Max 50000
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', '_date', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_historic_trades_symbol_date_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `v1_historic_trades_symbol_date_get`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `v1_historic_trades_symbol_date_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol' in params:
            path_params['symbol'] = params['symbol']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/historic/trades/{symbol}/{date}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_last_quote_stocks_symbol_get(self, symbol, **kwargs):  # noqa: E501
        """Last Quote for a Symbol  # noqa: E501

        Get the last quote tick for a given stock.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_last_quote_stocks_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Symbol of the quote to get (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_last_quote_stocks_symbol_get_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_last_quote_stocks_symbol_get_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def v1_last_quote_stocks_symbol_get_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """Last Quote for a Symbol  # noqa: E501

        Get the last quote tick for a given stock.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_last_quote_stocks_symbol_get_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Symbol of the quote to get (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_last_quote_stocks_symbol_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `v1_last_quote_stocks_symbol_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol' in params:
            path_params['symbol'] = params['symbol']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/last_quote/stocks/{symbol}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_last_stocks_symbol_get(self, symbol, **kwargs):  # noqa: E501
        """Last Trade for a Symbol  # noqa: E501

        Get the last trade for a given stock.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_last_stocks_symbol_get(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Symbol of the stock to get (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_last_stocks_symbol_get_with_http_info(symbol, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_last_stocks_symbol_get_with_http_info(symbol, **kwargs)  # noqa: E501
            return data

    def v1_last_stocks_symbol_get_with_http_info(self, symbol, **kwargs):  # noqa: E501
        """Last Trade for a Symbol  # noqa: E501

        Get the last trade for a given stock.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_last_stocks_symbol_get_with_http_info(symbol, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Symbol of the stock to get (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_last_stocks_symbol_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `v1_last_stocks_symbol_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol' in params:
            path_params['symbol'] = params['symbol']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/last/stocks/{symbol}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_meta_conditions_ticktype_get(self, ticktype, **kwargs):  # noqa: E501
        """Condition Mappings  # noqa: E501

        The mappings for conditions on trades and quotes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_meta_conditions_ticktype_get(ticktype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticktype: Ticker type we want mappings for  (required)
        :return: ConditionTypeMap
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_meta_conditions_ticktype_get_with_http_info(ticktype, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_meta_conditions_ticktype_get_with_http_info(ticktype, **kwargs)  # noqa: E501
            return data

    def v1_meta_conditions_ticktype_get_with_http_info(self, ticktype, **kwargs):  # noqa: E501
        """Condition Mappings  # noqa: E501

        The mappings for conditions on trades and quotes.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_meta_conditions_ticktype_get_with_http_info(ticktype, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticktype: Ticker type we want mappings for  (required)
        :return: ConditionTypeMap
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticktype']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_meta_conditions_ticktype_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticktype' is set
        if ('ticktype' not in params or
                params['ticktype'] is None):
            raise ValueError("Missing the required parameter `ticktype` when calling `v1_meta_conditions_ticktype_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticktype' in params:
            path_params['ticktype'] = params['ticktype']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/meta/conditions/{ticktype}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ConditionTypeMap',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_meta_exchanges_get(self, **kwargs):  # noqa: E501
        """Exchanges  # noqa: E501

        List of stock exchanges which are supported by Polygon.io   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_meta_exchanges_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Exchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_meta_exchanges_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v1_meta_exchanges_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v1_meta_exchanges_get_with_http_info(self, **kwargs):  # noqa: E501
        """Exchanges  # noqa: E501

        List of stock exchanges which are supported by Polygon.io   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_meta_exchanges_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Exchange]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_meta_exchanges_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/meta/exchanges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Exchange]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v1_open_close_symbol_date_get(self, symbol, _date, **kwargs):  # noqa: E501
        """Daily Open / Close  # noqa: E501

        Get the open, close and afterhours prices of a symbol on a certain date.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_open_close_symbol_date_get(symbol, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Symbol of the stock to get (required)
        :param date _date: Date of the requested open/close (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v1_open_close_symbol_date_get_with_http_info(symbol, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.v1_open_close_symbol_date_get_with_http_info(symbol, _date, **kwargs)  # noqa: E501
            return data

    def v1_open_close_symbol_date_get_with_http_info(self, symbol, _date, **kwargs):  # noqa: E501
        """Daily Open / Close  # noqa: E501

        Get the open, close and afterhours prices of a symbol on a certain date.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v1_open_close_symbol_date_get_with_http_info(symbol, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str symbol: Symbol of the stock to get (required)
        :param date _date: Date of the requested open/close (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['symbol', '_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v1_open_close_symbol_date_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'symbol' is set
        if ('symbol' not in params or
                params['symbol'] is None):
            raise ValueError("Missing the required parameter `symbol` when calling `v1_open_close_symbol_date_get`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `v1_open_close_symbol_date_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'symbol' in params:
            path_params['symbol'] = params['symbol']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v1/open-close/{symbol}/{date}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_aggs_grouped_locale_locale_market_market_date_get(self, locale, market, _date, **kwargs):  # noqa: E501
        """Grouped Daily  # noqa: E501

        Get the daily OHLC for entire markets.  ### *** Warning, may cause browser to hang *** The response size is large, and sometimes will cause the browser prettyprint to crash.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_aggs_grouped_locale_locale_market_market_date_get(locale, market, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: Locale of the aggregates ( See 'Locales' API ) (required)
        :param str market: Market of the aggregates ( See 'Markets' API ) (required)
        :param str _date: To date (required)
        :param bool unadjusted: Set to true if the results should NOT be adjusted for splits. 
        :return: AggResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_aggs_grouped_locale_locale_market_market_date_get_with_http_info(locale, market, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_aggs_grouped_locale_locale_market_market_date_get_with_http_info(locale, market, _date, **kwargs)  # noqa: E501
            return data

    def v2_aggs_grouped_locale_locale_market_market_date_get_with_http_info(self, locale, market, _date, **kwargs):  # noqa: E501
        """Grouped Daily  # noqa: E501

        Get the daily OHLC for entire markets.  ### *** Warning, may cause browser to hang *** The response size is large, and sometimes will cause the browser prettyprint to crash.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_aggs_grouped_locale_locale_market_market_date_get_with_http_info(locale, market, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str locale: Locale of the aggregates ( See 'Locales' API ) (required)
        :param str market: Market of the aggregates ( See 'Markets' API ) (required)
        :param str _date: To date (required)
        :param bool unadjusted: Set to true if the results should NOT be adjusted for splits. 
        :return: AggResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['locale', 'market', '_date', 'unadjusted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_aggs_grouped_locale_locale_market_market_date_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'locale' is set
        if ('locale' not in params or
                params['locale'] is None):
            raise ValueError("Missing the required parameter `locale` when calling `v2_aggs_grouped_locale_locale_market_market_date_get`")  # noqa: E501
        # verify the required parameter 'market' is set
        if ('market' not in params or
                params['market'] is None):
            raise ValueError("Missing the required parameter `market` when calling `v2_aggs_grouped_locale_locale_market_market_date_get`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `v2_aggs_grouped_locale_locale_market_market_date_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'locale' in params:
            path_params['locale'] = params['locale']  # noqa: E501
        if 'market' in params:
            path_params['market'] = params['market']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []
        if 'unadjusted' in params:
            query_params.append(('unadjusted', params['unadjusted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/aggs/grouped/locale/{locale}/market/{market}/{date}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_aggs_ticker_ticker_prev_get(self, ticker, **kwargs):  # noqa: E501
        """Previous Close  # noqa: E501

        Get the previous day close for the specified ticker   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_aggs_ticker_ticker_prev_get(ticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticker: Ticker symbol of the request (required)
        :param bool unadjusted: Set to true if the results should NOT be adjusted for splits. 
        :return: AggResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_aggs_ticker_ticker_prev_get_with_http_info(ticker, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_aggs_ticker_ticker_prev_get_with_http_info(ticker, **kwargs)  # noqa: E501
            return data

    def v2_aggs_ticker_ticker_prev_get_with_http_info(self, ticker, **kwargs):  # noqa: E501
        """Previous Close  # noqa: E501

        Get the previous day close for the specified ticker   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_aggs_ticker_ticker_prev_get_with_http_info(ticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticker: Ticker symbol of the request (required)
        :param bool unadjusted: Set to true if the results should NOT be adjusted for splits. 
        :return: AggResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticker', 'unadjusted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_aggs_ticker_ticker_prev_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticker' is set
        if ('ticker' not in params or
                params['ticker'] is None):
            raise ValueError("Missing the required parameter `ticker` when calling `v2_aggs_ticker_ticker_prev_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticker' in params:
            path_params['ticker'] = params['ticker']  # noqa: E501

        query_params = []
        if 'unadjusted' in params:
            query_params.append(('unadjusted', params['unadjusted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/aggs/ticker/{ticker}/prev', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_aggs_ticker_ticker_range_multiplier_timespan_from_to_get(self, ticker, multiplier, timespan, _from, to, **kwargs):  # noqa: E501
        """Aggregates  # noqa: E501

        Get aggregates for a date range, in custom time window sizes   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_aggs_ticker_ticker_range_multiplier_timespan_from_to_get(ticker, multiplier, timespan, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticker: Ticker symbol of the request (required)
        :param float multiplier: Size of the timespan multiplier (required)
        :param str timespan: Size of the time window (required)
        :param str _from: From date (required)
        :param str to: To date (required)
        :param bool unadjusted: Set to true if the results should NOT be adjusted for splits. 
        :return: AggResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_aggs_ticker_ticker_range_multiplier_timespan_from_to_get_with_http_info(ticker, multiplier, timespan, _from, to, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_aggs_ticker_ticker_range_multiplier_timespan_from_to_get_with_http_info(ticker, multiplier, timespan, _from, to, **kwargs)  # noqa: E501
            return data

    def v2_aggs_ticker_ticker_range_multiplier_timespan_from_to_get_with_http_info(self, ticker, multiplier, timespan, _from, to, **kwargs):  # noqa: E501
        """Aggregates  # noqa: E501

        Get aggregates for a date range, in custom time window sizes   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_aggs_ticker_ticker_range_multiplier_timespan_from_to_get_with_http_info(ticker, multiplier, timespan, _from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticker: Ticker symbol of the request (required)
        :param float multiplier: Size of the timespan multiplier (required)
        :param str timespan: Size of the time window (required)
        :param str _from: From date (required)
        :param str to: To date (required)
        :param bool unadjusted: Set to true if the results should NOT be adjusted for splits. 
        :return: AggResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticker', 'multiplier', 'timespan', '_from', 'to', 'unadjusted']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_aggs_ticker_ticker_range_multiplier_timespan_from_to_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticker' is set
        if ('ticker' not in params or
                params['ticker'] is None):
            raise ValueError("Missing the required parameter `ticker` when calling `v2_aggs_ticker_ticker_range_multiplier_timespan_from_to_get`")  # noqa: E501
        # verify the required parameter 'multiplier' is set
        if ('multiplier' not in params or
                params['multiplier'] is None):
            raise ValueError("Missing the required parameter `multiplier` when calling `v2_aggs_ticker_ticker_range_multiplier_timespan_from_to_get`")  # noqa: E501
        # verify the required parameter 'timespan' is set
        if ('timespan' not in params or
                params['timespan'] is None):
            raise ValueError("Missing the required parameter `timespan` when calling `v2_aggs_ticker_ticker_range_multiplier_timespan_from_to_get`")  # noqa: E501
        # verify the required parameter '_from' is set
        if ('_from' not in params or
                params['_from'] is None):
            raise ValueError("Missing the required parameter `_from` when calling `v2_aggs_ticker_ticker_range_multiplier_timespan_from_to_get`")  # noqa: E501
        # verify the required parameter 'to' is set
        if ('to' not in params or
                params['to'] is None):
            raise ValueError("Missing the required parameter `to` when calling `v2_aggs_ticker_ticker_range_multiplier_timespan_from_to_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticker' in params:
            path_params['ticker'] = params['ticker']  # noqa: E501
        if 'multiplier' in params:
            path_params['multiplier'] = params['multiplier']  # noqa: E501
        if 'timespan' in params:
            path_params['timespan'] = params['timespan']  # noqa: E501
        if '_from' in params:
            path_params['from'] = params['_from']  # noqa: E501
        if 'to' in params:
            path_params['to'] = params['to']  # noqa: E501

        query_params = []
        if 'unadjusted' in params:
            query_params.append(('unadjusted', params['unadjusted']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/aggs/ticker/{ticker}/range/{multiplier}/{timespan}/{from}/{to}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AggResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_snapshot_locale_us_markets_stocks_direction_get(self, direction, **kwargs):  # noqa: E501
        """Snapshot - Gainers / Losers  # noqa: E501

        See the current snapshot of the top 20 gainers or losers of the day at the moment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_snapshot_locale_us_markets_stocks_direction_get(direction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction: Direction we want  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_snapshot_locale_us_markets_stocks_direction_get_with_http_info(direction, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_snapshot_locale_us_markets_stocks_direction_get_with_http_info(direction, **kwargs)  # noqa: E501
            return data

    def v2_snapshot_locale_us_markets_stocks_direction_get_with_http_info(self, direction, **kwargs):  # noqa: E501
        """Snapshot - Gainers / Losers  # noqa: E501

        See the current snapshot of the top 20 gainers or losers of the day at the moment.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_snapshot_locale_us_markets_stocks_direction_get_with_http_info(direction, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str direction: Direction we want  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['direction']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_snapshot_locale_us_markets_stocks_direction_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'direction' is set
        if ('direction' not in params or
                params['direction'] is None):
            raise ValueError("Missing the required parameter `direction` when calling `v2_snapshot_locale_us_markets_stocks_direction_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'direction' in params:
            path_params['direction'] = params['direction']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/snapshot/locale/us/markets/stocks/{direction}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_snapshot_locale_us_markets_stocks_tickers_get(self, **kwargs):  # noqa: E501
        """Snapshot - All Tickers  # noqa: E501

        Snapshot allows you to see all tickers current minute aggregate, daily aggregate and last trade. As well as previous days aggregate and calculated change for today.  ### *** Warning, may cause browser to hang *** The response size is large, and sometimes will cause the browser prettyprint to crash.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_snapshot_locale_us_markets_stocks_tickers_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_snapshot_locale_us_markets_stocks_tickers_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.v2_snapshot_locale_us_markets_stocks_tickers_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def v2_snapshot_locale_us_markets_stocks_tickers_get_with_http_info(self, **kwargs):  # noqa: E501
        """Snapshot - All Tickers  # noqa: E501

        Snapshot allows you to see all tickers current minute aggregate, daily aggregate and last trade. As well as previous days aggregate and calculated change for today.  ### *** Warning, may cause browser to hang *** The response size is large, and sometimes will cause the browser prettyprint to crash.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_snapshot_locale_us_markets_stocks_tickers_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_snapshot_locale_us_markets_stocks_tickers_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/snapshot/locale/us/markets/stocks/tickers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_snapshot_locale_us_markets_stocks_tickers_ticker_get(self, ticker, **kwargs):  # noqa: E501
        """Snapshot - Single Ticker  # noqa: E501

        See the current snapshot of a single ticker   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_snapshot_locale_us_markets_stocks_tickers_ticker_get(ticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticker: Ticker of the snapshot (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_snapshot_locale_us_markets_stocks_tickers_ticker_get_with_http_info(ticker, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_snapshot_locale_us_markets_stocks_tickers_ticker_get_with_http_info(ticker, **kwargs)  # noqa: E501
            return data

    def v2_snapshot_locale_us_markets_stocks_tickers_ticker_get_with_http_info(self, ticker, **kwargs):  # noqa: E501
        """Snapshot - Single Ticker  # noqa: E501

        See the current snapshot of a single ticker   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_snapshot_locale_us_markets_stocks_tickers_ticker_get_with_http_info(ticker, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticker: Ticker of the snapshot (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticker']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_snapshot_locale_us_markets_stocks_tickers_ticker_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticker' is set
        if ('ticker' not in params or
                params['ticker'] is None):
            raise ValueError("Missing the required parameter `ticker` when calling `v2_snapshot_locale_us_markets_stocks_tickers_ticker_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticker' in params:
            path_params['ticker'] = params['ticker']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/snapshot/locale/us/markets/stocks/tickers/{ticker}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_ticks_stocks_nbbo_ticker_date_get(self, ticker, _date, **kwargs):  # noqa: E501
        """( v2 ) Historic NBBO Quotes  # noqa: E501

        Get historic NBBO quotes for a ticker.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_ticks_stocks_nbbo_ticker_date_get(ticker, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticker: Ticker symbol we want ticks for (required)
        :param date _date: Date/Day of the historic ticks to retreive ( YYYY-MM-DD ) (required)
        :param int timestamp: Timestamp offset, used for pagination. This is the offset at which to start the results. Using the `timestamp` of the last result as the offset will give you the next page of results. 
        :param int timestamp_limit: Maximum timestamp allowed in the results. 
        :param bool reverse: Reverse the order of the results. This is useful in combination with `timestamp` param. 
        :param int limit: Limit the size of response, Max 50000
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_ticks_stocks_nbbo_ticker_date_get_with_http_info(ticker, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_ticks_stocks_nbbo_ticker_date_get_with_http_info(ticker, _date, **kwargs)  # noqa: E501
            return data

    def v2_ticks_stocks_nbbo_ticker_date_get_with_http_info(self, ticker, _date, **kwargs):  # noqa: E501
        """( v2 ) Historic NBBO Quotes  # noqa: E501

        Get historic NBBO quotes for a ticker.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_ticks_stocks_nbbo_ticker_date_get_with_http_info(ticker, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticker: Ticker symbol we want ticks for (required)
        :param date _date: Date/Day of the historic ticks to retreive ( YYYY-MM-DD ) (required)
        :param int timestamp: Timestamp offset, used for pagination. This is the offset at which to start the results. Using the `timestamp` of the last result as the offset will give you the next page of results. 
        :param int timestamp_limit: Maximum timestamp allowed in the results. 
        :param bool reverse: Reverse the order of the results. This is useful in combination with `timestamp` param. 
        :param int limit: Limit the size of response, Max 50000
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticker', '_date', 'timestamp', 'timestamp_limit', 'reverse', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_ticks_stocks_nbbo_ticker_date_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticker' is set
        if ('ticker' not in params or
                params['ticker'] is None):
            raise ValueError("Missing the required parameter `ticker` when calling `v2_ticks_stocks_nbbo_ticker_date_get`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `v2_ticks_stocks_nbbo_ticker_date_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticker' in params:
            path_params['ticker'] = params['ticker']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'timestamp_limit' in params:
            query_params.append(('timestampLimit', params['timestamp_limit']))  # noqa: E501
        if 'reverse' in params:
            query_params.append(('reverse', params['reverse']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/ticks/stocks/nbbo/{ticker}/{date}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def v2_ticks_stocks_trades_ticker_date_get(self, ticker, _date, **kwargs):  # noqa: E501
        """( v2 ) Historic Trades  # noqa: E501

        Get historic trades for a ticker.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_ticks_stocks_trades_ticker_date_get(ticker, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticker: Ticker symbol we want ticks for (required)
        :param date _date: Date/Day of the historic ticks to retreive ( YYYY-MM-DD ) (required)
        :param int timestamp: Timestamp offset, used for pagination. This is the offset at which to start the results. Using the `timestamp` of the last result as the offset will give you the next page of results. 
        :param int timestamp_limit: Maximum timestamp allowed in the results. 
        :param bool reverse: Reverse the order of the results. This is useful in combination with `timestamp` param. 
        :param int limit: Limit the size of response, Max 50000
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.v2_ticks_stocks_trades_ticker_date_get_with_http_info(ticker, _date, **kwargs)  # noqa: E501
        else:
            (data) = self.v2_ticks_stocks_trades_ticker_date_get_with_http_info(ticker, _date, **kwargs)  # noqa: E501
            return data

    def v2_ticks_stocks_trades_ticker_date_get_with_http_info(self, ticker, _date, **kwargs):  # noqa: E501
        """( v2 ) Historic Trades  # noqa: E501

        Get historic trades for a ticker.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.v2_ticks_stocks_trades_ticker_date_get_with_http_info(ticker, _date, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str ticker: Ticker symbol we want ticks for (required)
        :param date _date: Date/Day of the historic ticks to retreive ( YYYY-MM-DD ) (required)
        :param int timestamp: Timestamp offset, used for pagination. This is the offset at which to start the results. Using the `timestamp` of the last result as the offset will give you the next page of results. 
        :param int timestamp_limit: Maximum timestamp allowed in the results. 
        :param bool reverse: Reverse the order of the results. This is useful in combination with `timestamp` param. 
        :param int limit: Limit the size of response, Max 50000
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['ticker', '_date', 'timestamp', 'timestamp_limit', 'reverse', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method v2_ticks_stocks_trades_ticker_date_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'ticker' is set
        if ('ticker' not in params or
                params['ticker'] is None):
            raise ValueError("Missing the required parameter `ticker` when calling `v2_ticks_stocks_trades_ticker_date_get`")  # noqa: E501
        # verify the required parameter '_date' is set
        if ('_date' not in params or
                params['_date'] is None):
            raise ValueError("Missing the required parameter `_date` when calling `v2_ticks_stocks_trades_ticker_date_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'ticker' in params:
            path_params['ticker'] = params['ticker']  # noqa: E501
        if '_date' in params:
            path_params['date'] = params['_date']  # noqa: E501

        query_params = []
        if 'timestamp' in params:
            query_params.append(('timestamp', params['timestamp']))  # noqa: E501
        if 'timestamp_limit' in params:
            query_params.append(('timestampLimit', params['timestamp_limit']))  # noqa: E501
        if 'reverse' in params:
            query_params.append(('reverse', params['reverse']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apiKey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/ticks/stocks/trades/{ticker}/{date}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
